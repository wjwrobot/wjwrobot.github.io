{"meta":{"title":"faust's blog","subtitle":null,"description":null,"author":"Rick Ong","url":"https://wjwrobot.github.io"},"pages":[{"title":"About","date":"2019-01-19T07:03:45.000Z","updated":"2019-01-21T16:00:00.000Z","comments":true,"path":"about/index.html","permalink":"https://wjwrobot.github.io/about/index.html","excerpt":"","text":"This website is for recording my life. ​ “I understand now, you are attracted to greatness. Because greatness is all in you. But it’s easier to watch greatness. It’s easier to go see greatness, than it is to put in the time, to put in the energy, to discipline yourself, to sacrifice … It’s easier, so that’s why you average. ​ You’ve been doing the same thing, you at the same job. You are experiencing the same things in your life. Nothing has changed. Everything about you is phenomenal. But you’ve consciously made a decision to be average. You are average in school, you are average at your workplace, like everything you do is average, not because it’s average, but because you made a decision. You make a choice to be average … , Why ? ​ Because the people around you are average or maybe you grew up in an average environment or went to an average school or you’ve worked for an average company. So you’ve decided. You’ve decided to go against who you are. No one else feels sorry for you, only you do. That’s the type of mindset when people aren’t successful at life. They sit there and feel sorry for themselves and they want all this fucking sympathy from everybody else. Yet they are not willing to go out there and make shit happen for themselves. Because this is not for every one. This is not for the faint at heart. This is for people who have goals and dreams, that they want to achieve. You could be great if you just showed up. ​ You deserve to see what your life would look like if you gave a 120%. You gotta run after your destiny. The choice that we have though is either to give up or keep on going. I wanna ask you – what are you going to believe. Are you gonna believe … in yourself ? Are you gonna believe everybody else’s judgement on you ? ​ I want your dream to be so clear, so vivid. That when you wake up in the morning all you have to do is step in your dream. ​ I didn’t get it till I got to this age, but I am gonna start running. I messed up junior high, but now I’m gonna start running. I messed up high school, but now I’m gonna start running. The moment you get the word – you want to run … The father said – the day you hear my voice hiding at your heart. When God gives you a chance at an escape, don’t be cute … Run after your destiny. RUN, don’t be ashamed, RUNNN. ​ The harder you work, the harder it is to surrender. And that’s in every aspect of life ​ Start acting like this is your last day on the planet. I deserve to see what my life would like if I gave a 120%. I’d rather aim for the stars and not hit them, than to not aim at all. I’d rather go after it and not get it, than not go after it at all. I’d rather try and fail, than not try at all. ​ I don’t wanna live with the idea – wonder what would’ve happen had I done more with my life. You can’t walk after your destiny. Don’t spend all your time trying to fix what’s behind you. Because you will never be able to fix what’s behind you. You have to run after what’s in front of you “ Video"},{"title":"Projects","date":"2019-01-19T16:00:00.000Z","updated":"2019-01-20T02:13:05.000Z","comments":true,"path":"project/index.html","permalink":"https://wjwrobot.github.io/project/index.html","excerpt":"","text":"This is the project main page."},{"title":"Computer Vision","date":"2019-01-19T13:27:24.000Z","updated":"2019-01-20T02:12:39.000Z","comments":true,"path":"project/cv/index.html","permalink":"https://wjwrobot.github.io/project/cv/index.html","excerpt":"","text":"This is computer vision project."},{"title":"Speech Recognition","date":"2019-01-19T13:27:24.000Z","updated":"2019-01-19T14:19:13.000Z","comments":true,"path":"project/nlp/index.html","permalink":"https://wjwrobot.github.io/project/nlp/index.html","excerpt":"","text":"This is speech recognition project."},{"title":"Auto Driver","date":"2019-01-19T13:27:24.000Z","updated":"2019-01-19T14:13:32.000Z","comments":true,"path":"project/autodriver/index.html","permalink":"https://wjwrobot.github.io/project/autodriver/index.html","excerpt":"","text":"This is auto driver project."}],"posts":[{"title":"Install and Configure Arch Linux","slug":"Install-and-Configure-Arch-Linux","date":"2019-05-05T11:53:04.000Z","updated":"2019-05-05T12:53:09.460Z","comments":true,"path":"2019/05/05/Install-and-Configure-Arch-Linux/","link":"","permalink":"https://wjwrobot.github.io/2019/05/05/Install-and-Configure-Arch-Linux/","excerpt":"Steps to install Arch Linux and configure it for daily use and work.","text":"Steps to install Arch Linux and configure it for daily use and work. Pre-installationVerify signatureUse GnuPG to verify downloaded package. 1gpg --keyserver pgp.mit.edu --keyserver-options auto-key-retrieve --verify archlinux-&lt;version&gt;-x86_64.iso.sig Build bootable live environmentPlug in USB and check its device name by 1lsblk Asume its name is /dev/sdb, then use dd to build the bootable system to usb (warning before press “ENTER”, double check the command to prevent from destroying system) 1dd if=/way/to/arch/file of=/dev/sdb Verify the boot mode1ls /sys/firmware/efi/efivars If the directory does not exist, the system may be booted in BIOS or CSM mode, otherwise, in UEFI mode. If it’s in UEFI mode, go ahead. Plug in USB, shut down computer, enter into BIOS system interface with holding F2 then press power button. (Different motherboards diverse in entering BIOS) If you can’t see a boot option “boot from USB”, go to create a boot option by select your boot file which end with .efi. And then put this option to number 1 boot option. OK, save change and reboot system. Now we had entered the Arch live system. Connect to the InternetThe installation image enables the dhcpcd daemon for wired network devices on boot. The connection can be verified with ping, If you use wifi, you should configure wifi with wifi-menu 1wifi-menu 1ping -c 3 baidu.com Update the system clockUse timedatectl to ensure the system clock is accurate 1timedatectl set-ntp true (To check the service status, use ) 1timedatectl status Partition the disksWhen recognized by the live system,disks are assigned to a block device. To identify these devices, use lsblk or fdisk -l 1lsblk The following partitions are required for a chosen device: One partition for the root directory / . If UEFI is enabled, an EFI system partition . (The following are alternative) Swap space can be set on a separate partition or a swap file . /home directory for users . (Note : If you want to create any stacked block devices for LVM, disk encryption, or RAID, do it now.) To modify partition tables, use cfdisk, fdisk or parted. 1cfdisk /dev/sda my partition plan for system with 4G RAM and 500G storage device 123/dev/sda1 200M /boot/efi EFI System/dev/sda2 250G / Linux fs/dev/sda3 remaining /home Linux fs Format the partitionsOnce the partitions have been created, each must be formatted with an appropriate file system. 1234mkfs.fat -F32 /dev/sda1mkfs.ext4 /dev/sda2mkfs.ext4 /dev/sda3 Mount the file systemsMount the file system on the root partition to /mnt 1mount /dev/sda2 /mnt Create mount points for any remaining partitions and mount them accordingly 12345mkdir /mnt/boot/efimount /dev/sda1 /mnt/boot/efimkdir /mnt/homemount /dev/sda3 /mnt/home genfstab will later detect mounted file systems and swap space. We have accomplished the work for Pre-Installation, now enter the process of Installation. InstallationSelect the mirrorsPackages to be installed must be downloaded from mirror servers, which are defined in /etc/pacman.d/mirrorlist . Use vim to select your country’s mirror to the top. 1vim /etc/pacman.d/mirrorlist Install the base packagesUse the pacstrap script to install the base and base-devel package groups: 1pacstrap /mnt base base-devel Configure the systemFstabGenerate an fstab file (use -U or -L to define by UUID or labels, respectively) 1genfstab -U /mnt &gt;&gt; /mnt/etc/fstab and check the resulting file. ChrootChange root into the new system: 1arch-chroot /mnt Configure wifi12pacman -S dialog wpa_suppliant wifi-menu Time zone1ln -sf /usr/share/zoneinfo/Asian/Shanghai /etc/localtime Generate /etc/adjtime 1hwclock --systohc This command assumes the hardware clock is set to UTC. LocalizationUncomment en_US.UTF-8 UTF-8 and other needed locales in /etc/locale.gen,and generate them 1locale-gen Set the LANG variable in /etc/locale.conf 1LANG=en_US.UTF-8 Network configurationCreate the hostname file /etc/hostname 1echo 'Arch' &gt; /etc/hostname ​Add matching entries to /etc/hosts 1echo -e \"127.0.0.1\\tlocalhost\\n::1\\t\\tlocalhost\\n127.0.1.1\\tArch.localdomain\\tArch\" &gt; /etc/hosts If the system has a permament IP address, it should be used instead of 127.0.1.1 . InitramfsCreating a new initramfs is usually not required, because mkinitcpio was run on installation of the linux package with pacstrap . For special configurations, modify the mkinitcpio.conf file and recreate the initramfs image : 1mkinitcpio -p linux Set root password1passwd Install bootloaderA Linux-capable boot loader must be installed in order to boot Arch Linux. If you have an Intel or AMD CPU, enable microcode updates. Let’s install GRUB boot loader: Download grub and efibootmgr1pacman -S grub efibootmgr GRUB is the bootloader while efibootmgr is used by the GRUB installation script to write boot entries to NVRAM . (Mount the EFI system partition at mount point, for example, /boot/efi ) Install the GRUB EFI applicationInstall the GRUB EFI application grubx64.efi to /boot/efi/EFI/GRUB/ and install its modules to /boot/grub/x86_64-efi/ . 1grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB (After the above install completed the main GRUB directory is located at /boot/grub/ . Note that grub-install also tries to create an entry tin the fireware boot manager, named GRUB in the above example.) Generated grub.cfgUse the grub-mkconfig tool to generate /boot/grub/grub.cfg 1grub-mkconfig -o /boot/grub/grub.cfg (Note: Remember that /boot/grub/grub.cfg has to be re-generated after any change to /etc/default/grub or files in /etc/grub.d . After installing or removing a kernel, you just need to re-run the above grub-mkconfig command.) RebootExit the chroot environment, then manually unmount all the partitions.Finally, restart the machine. 123exitumount -R /mntreboot Post-installationAdd a new user12useradd -m -G wheel -s /bin/bash wjwpasswd wjw To grant sudo access to user wjw run visudo and add “wjw ALL=(ALL) ALL“ 1visudo FontSee available fonts 1fc-list Download fonts 1sudo pacman -S wqy-microhei ttf-dejavu or download packages manually and put font files to the .local/share/fonts/ directory. If you want to change console font, put font files in the /usr/share/kbd/consolefonts directory. Then go to see the console fonts, and select one.. 12ls /usr/share/kbd/consolefontsecho \"FONT=sun12x22\\nFONT_MAP=8859-2\" &gt; /etc/vconsole.conf Graphical user interfaceInstall Xorg1sudo pacman -S xorg-server xorg-xinit configure ~/.xinitrc file 1[[ -f ~/.Xresources ]] &amp;&amp; xrdb -merge -I$HOME ~/.Xresources Install i3-gaps and related programsInstall i3-gaps and configure to start from ~/.xinitrc . (rofi for replacing d-menu, feh for setting wallpaper, light for brightness control, scrot for screenshot, i3blocks for replacing i3status, acpi for i3blocks’s battery module) 12sudo pacman -S i3-gaps i3blocks rofi feh light scrot acpiecho 'exec i3' &gt; ~/.xinitrc You can start up i3 manually by typing command startx or set it to automatically.If you use zsh ,put the following into the ~/.zprofile to auto start X at login 123if [[ ! $DISPLAY &amp;&amp; $XDG_VTNR -eq 1 ]]; then exec startxfi Install ssr123456sudo pacman -S git wget pythonwget http://www.djangoz.com/ssrsudo mv ssr /usr/local/binsudo chmod 744 /usr/local/bin/ssrssr installssr config Wireless configureInstall dialog and wpa_suppliant for using wifi-menu . (or optionally Install networkmanager ) 1sudo pacman -S dialog wpa_suppliant Enabling wifi auto connecting when boot. (use netctl) 1sudo wifi-menu -o use command above to generate the profile in /etc/netctl for use of netctl. 1sudo netctl enable your_profile SoundIf no sound because of Master set to HDMI, go to change it to PCM. 1sudo echo -e \"defaults.pcm.card 1\\ndefaults.pcm.device 0\\ndefaults.ctl.card 1\" &gt; /etc/asound.conf Download pulseaudio and related control command utils. 1sudo pacman -S pulseaudio playerctl And download alsa-utils for controling alsa1sudo pacman -S alsa-utils Useful program1sudo pacman -S firefox neofetch yay123git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si lxappearance &amp; qt5ctqt5ct for qt5 based programs, while lxappearance for gtk based programs. 1sudo pacman -S lxappearance qt5ct gtk related configure files: 12~/.gtkrc-2.0~/.config/gtk-3.0/settings.ini add the following environment variable to ~/.pam_environment 1QT_QPA_PLATFORMTHEME=qt5ct laptop power saving1sudo pacman -S tlp then configure it: 12systemctl enable tlp.service tlp-sleep.servicesystemctl mask systemd-rfkill.service systemd-rfkill.socket (Note: tlp.service starts NetworkManager.service if it is available. If you use a different network manager, mask NetworkManager.service or edit tlp.service and remove the service out of line Wants=) System proxy (Privoxy)1sudo pacman -S privoxy then edit /etc/privoxy/config file and add the following line the 5.2 section (note the . at the end) 1forward-socks5 / 127.0.0.1:1080 . It means that transact all http requests to socks5 and redirect to localhost’s 1080 port (change this value to your ssr listening port) then you should go to start and enable privoxy.service . 12systemctl start privoxy.servicesystemctl enable privoxy.service Privoxy’s default listening port is 8118, so your should set your http proxy address to 127.0.0.1:8118 . 1export http_proxy=\"http://127.0.0.1:8118\" Configure git proxy 1git config --global http.proxy 127.0.0.1:8118 File managerVisual file manafer 1sudo pacman -S ranger tmux &amp; tmux-resurrect1sudo pacman -S tmux Build packageuse asp or pbget 1sudo pacman -S asp DockerDownload docker, then create a group named docker and add user to this group for using docker without “sudo” command for regular user. 123sudo pacman -S dockersudo groupadd dockersudo usermod -aG docker $USER Then enable and start docker.service 12systemctl enable docker.servicesystemctl start docker.service Setting proxy for docker: 12mkdir /etc/systemd/system/docker.service.dtouch /etc/systemd/system/docker.service.d/proxy.conf put following content to the file above 123[Service]Environment=&quot;HTTP_PROXY=192.168.1.1:8118&quot;Environment=&quot;HTTPS_PROXY=192.168.1.1:8118&quot; Then reload units 1systemctl daemon-reload Check whether setting successfully 1systemctl show docker --property Environment TensorflowDownload nvidia-docker 1yay -S nvidia-docker Pull latest tensorflow-gpu 1docker pull tensorflow/tensorflow:latest-gpu-py3 1docker run --runtime=nvidia -it tensorflow/tensorflow:latest-gpu-py3 bash (Note: nvidia-docker v1 uses the nvidia-docker alias, where v2 uses docker --runtime=nvidia.) Docker Usage 123456789101112131415161718docker ps -a #check all containersdocker rm $(docker ps -aq) #delete all containersdocker images #check all imagesdocker rmi $(docker images -q) #delete all imagesdocker rmi node_name #delete node(image)docker info docker version# create a container named tf and run it# -it : interactive# --name : assign the name \"tf\" to this container# -p : mapping ports of container to host, first pair for Jupyter notebook, the second one for Tensorboard# -v host_folder:container_folder : enables sharing a folder between the host and the container. The host folder should be inside your home directory. This folder is seen as notebooks directory in the container which is used by Ipython/Jupyter Notebook.docker run -it -p 8888:8888 -p 6006:6006 -v $(pwd)/tensorflow:/notebooks --name tf tensorflow/tensorflowdocker start -i tf #start container named tf with interactive mode Anaconda and PytorchInstalling anaconda3 firstly, then create an environment named “pytorch” for pytorch compatible with cuda 10, lastly, enter this environment. 12345wget http://repo.continuum.io/archive/Anaconda3-2018.12-Linux-x86_64.sh./Anaconda3-2018.12-Linux-x86_64.shconda create -n pytorch pytorch torchvision cuda100 -c pytorchsource activate pytorch or use pip package manager to install pytorch 12$ pip3 --no-cache-dir install torch$ pip3 --no-cache-dir install torchvision xclip1sudo pacman -S xclip githubAdd ssh key : 1234567ssh-keygen -t rsa -b 4096 -C \"youremail@gmail.com\"eval \"$(ssh-agent -s)\"ssh-add ~/.ssh/id_rsaxclip -sel clip &lt; ~/.ssh/id_rsa.pub# change your origin remote to ssh url from https urlgit remote set-url origin git@github.com:&lt;Username&gt;/&lt;Project&gt;.git Go to github add a new key, then paste the content of the clipboard to it. (If count problem “ssh: connect to host github.com port 22: Connection refused”, go to create a config file for ssh) 123Host github.com Hostname ssh.github.com Port 443 Put the content above to the file ~/.ssh/config. Mediampd + ncmpcpp + cantata + mps-youtube + youtube-dl + mpv Text Editorchemacs123git clone https://github.com/plexus/chemacs.gitcd chemacs./install.sh Use Doom-Emacs with chemacs12touch ~/.emacs-profiles.elmkdir -p ~/Git/doom put the content below to ~/.emacs-profiles.el123((&quot;default&quot; . ((user-emacs-directory . &quot;~/.emacs.d&quot;))) (&quot;doom&quot; . ((user-emacs-directory . &quot;~/Git/doom&quot;) (env . ((&quot;DOOMDIR&quot; . &quot;~/.doom.d&quot;)))))) 1234git clone -b develop https://github.com/hlissner/doom-emacs ~/Git/doom~/Git/doom/bin/doom -p ~/.doom.d quickstartmake installemacs --with-profile doom &amp; Doom-Emacs1234git clone -b develop https://github.com/hlissner/doom-emacs ~/.emacs.d~/.emacs.d/bin/doom quickstartcd .emacs.dmake install Pdf Reader1sudo pacman -S zathura zathura-pdf-poppler Input Method1sudo pacman -S ibus ibus-rime ​ Change the default chinese input method to simplified, within the file ~/.config/ibus/rime/build/luna_pinyin.schema.yaml put reset: 1 underneath the name: simplification. SwitchyOmega​ In auto switch profile, in Rule list confifug, select AutoProxy, and put the following content into Rule list url.1https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt Mount usbSee the usb’s device name1dmesg | tail said, /dev/sdb, then go to make a mount point, and mount itfor example12sudo mkdir -p /mnt/media/usbmount /dev/sdb1 /mnt/media/usb 1umount /dev/sdb1 References Installation guide How do I start tensorflow docker jupyter notebook","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wjwrobot.github.io/categories/Linux/"}],"tags":[{"name":"Arch Linux","slug":"Arch-Linux","permalink":"https://wjwrobot.github.io/tags/Arch-Linux/"},{"name":"Linux","slug":"Linux","permalink":"https://wjwrobot.github.io/tags/Linux/"}]},{"title":"Enable Colaboratory to Use Local Runtime","slug":"Enable-Colaboratory-use-local-runtime","date":"2019-01-23T08:44:25.000Z","updated":"2019-01-23T09:09:56.000Z","comments":true,"path":"2019/01/23/Enable-Colaboratory-use-local-runtime/","link":"","permalink":"https://wjwrobot.github.io/2019/01/23/Enable-Colaboratory-use-local-runtime/","excerpt":"Enable Google Colaboratory to use local runtime through Jupyter Notebook.","text":"Enable Google Colaboratory to use local runtime through Jupyter Notebook. Install Jupyter Notebook1$ sudo pacman -S jupyter-notebook Enable interactive Javascript widgets in the notebooks: 1$ sudo jupyter nbextension enable --py --sys-prefix widgetsnbextension Install and enable the jupyter_http_over_ws jupyter extension12$ sudo pip install jupyter_http_over_ws$ jupyter serverextension enable --py jupyter_http_over_ws Start server and authenticate1234$ jupyter notebook \\ --NotebookApp.allow_origin='https://colab.research.google.com' \\ --port=8888 \\ --NotebookApp.port_retries=0 Connect to the local runtimeIn Colaboratory, click the “Connect” button and select “Connect to local runtime…” Note: If you use firefox, you must set the network.websocket.allowInsecureFromHTTPS to be true. In the address bar, type about:config and press Enter, then type network.websocket.allowInsecureFromHTTPS and set its value to be true. References: Install Jupyter Colaboratory local runtime","categories":[{"name":"Software","slug":"Software","permalink":"https://wjwrobot.github.io/categories/Software/"}],"tags":[{"name":"Colaboratory","slug":"Colaboratory","permalink":"https://wjwrobot.github.io/tags/Colaboratory/"},{"name":"Jupyter Notebook","slug":"Jupyter-Notebook","permalink":"https://wjwrobot.github.io/tags/Jupyter-Notebook/"}]},{"title":"Building Personal Website with Github","slug":"build_site_with_github","date":"2019-01-19T16:00:00.000Z","updated":"2019-05-05T13:06:29.480Z","comments":true,"path":"2019/01/20/build_site_with_github/","link":"","permalink":"https://wjwrobot.github.io/2019/01/20/build_site_with_github/","excerpt":"A tutorial for building your own website make use of github and hexo, with a beautiful theme “material-x”.","text":"A tutorial for building your own website make use of github and hexo, with a beautiful theme “material-x”. Install hexo​ You should alread install git and nodejs. 1$ npm install -g hexo-cli ​ Hexo create a directory for your project: 12$ hexo init &lt;folder&gt;$ cd &lt;folder&gt; ​ Hexo will build a skeleton for your site: 1$ npm install ​ Test whether everything is ok: 1$ hexo server ​ If it works well. you can change the theme, which can be found on hexo site. I will use material-x theme : 12$ cd themes$ git clone https://github.com/xaoxuu/hexo-theme-material-x themes/material-x ​ Then install dependencies: 1$ npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-posts hexo-helper-qrcode ​ Go to the your project’s root directory, and configure the file _config.yml. ​ Item theme: change its value to your theme’s name, for example: 1theme: material-x Install git deploy plugin​ Look for deploy item ,and modify it like follow: 1234deploy: type: git repo: git@github.com:wjwrobot/wjwrobot.github.io.git branch: master ​ After that we are going to install git deploy plugin: 1$ npm install hexo-deployer-git --save ​ Latsly, you can configure your theme according to this tutorial . Deploy to your github website​ Before deploy it to github, test it on local machine: 12$ hexo generator # or hexo g$ hexo server # or hexo s ​ Open a browser ,input following address: 1http://localhost:4000/ ​ If work well deploy it to github 1$ hexo deploy # or hexo d ​ Create a repo for your theme​ Change your pwd to your installed theme directory. Then use browser to create a repo and name it (e.g.hexo-theme-material-x). Change remote origin to your repo and add the origin author’s repo as remote upstream for later updating. 12345$ git remote -v$ git remote remove origin$ git remote add origin https://github.com/wjwrobot/hexo-theme-material-x.gi$ git push origin master$ git remote add upstream https://github.com/xaoxuu/hexo-theme-material-x.git ​ If upstream has update, you can use fetch command to get it and merge upstream/master to local master: 12$ git fetch upstream$ git merge upstream/master ​ Push to remote repo: 1$ git push origin master","categories":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://wjwrobot.github.io/categories/Nodejs/"}],"tags":[{"name":"git","slug":"git","permalink":"https://wjwrobot.github.io/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"https://wjwrobot.github.io/tags/hexo/"},{"name":"nodejs","slug":"nodejs","permalink":"https://wjwrobot.github.io/tags/nodejs/"}]},{"title":"My New Post","slug":"My-New-Post","date":"2019-01-18T14:47:55.000Z","updated":"2019-01-20T11:35:38.000Z","comments":true,"path":"2019/01/18/My-New-Post/","link":"","permalink":"https://wjwrobot.github.io/2019/01/18/My-New-Post/","excerpt":"","text":"","categories":[{"name":"other","slug":"other","permalink":"https://wjwrobot.github.io/categories/other/"}],"tags":[{"name":"test","slug":"test","permalink":"https://wjwrobot.github.io/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-17T16:00:00.000Z","updated":"2019-01-19T16:00:00.000Z","comments":true,"path":"2019/01/18/hello-world/","link":"","permalink":"https://wjwrobot.github.io/2019/01/18/hello-world/","excerpt":"It is a test post.","text":"It is a test post. Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Video","categories":[{"name":"other","slug":"other","permalink":"https://wjwrobot.github.io/categories/other/"}],"tags":[{"name":"test","slug":"test","permalink":"https://wjwrobot.github.io/tags/test/"}]}]}