<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>faust&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wjwrobot.github.io/"/>
  <updated>2020-02-13T13:03:55.143Z</updated>
  <id>https://wjwrobot.github.io/</id>
  
  <author>
    <name>Rick Ong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ensemble Learning and Random Forests</title>
    <link href="https://wjwrobot.github.io/2020/02/13/Ensemble-Learning-and-Random-Forests/"/>
    <id>https://wjwrobot.github.io/2020/02/13/Ensemble-Learning-and-Random-Forests/</id>
    <published>2020-02-13T12:55:50.000Z</published>
    <updated>2020-02-13T13:03:55.143Z</updated>
    
    <content type="html"><![CDATA[<p>Ensemble Learning and Random Forests.</p><a id="more"></a><p>An ensemble of Decision Trees is called a <em>Random Forest</em>.</p><p>There are some popular ensemble methods, including <em>bagging</em>, <em>boosting</em> and<br><em>stacking</em>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="">Hands-on Machine Learning with Scikit-Learn, Keras and TensorFlow</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ensemble Learning and Random Forests.&lt;/p&gt;
    
    </summary>
    
      <category term="MachineLearning" scheme="https://wjwrobot.github.io/categories/MachineLearning/"/>
    
    
      <category term="Machine Learning" scheme="https://wjwrobot.github.io/tags/Machine-Learning/"/>
    
      <category term="Ensemble Learning" scheme="https://wjwrobot.github.io/tags/Ensemble-Learning/"/>
    
      <category term="Random Forest" scheme="https://wjwrobot.github.io/tags/Random-Forest/"/>
    
  </entry>
  
  <entry>
    <title>The Solutions for LeetCode Problems</title>
    <link href="https://wjwrobot.github.io/2020/02/13/The-Solutions-for-LeetCode-Problems/"/>
    <id>https://wjwrobot.github.io/2020/02/13/The-Solutions-for-LeetCode-Problems/</id>
    <published>2020-02-13T02:21:14.000Z</published>
    <updated>2020-02-14T09:52:48.644Z</updated>
    
    <content type="html"><![CDATA[<p>The solutions for LeetCode problems in C++ and Python.</p><a id="more"></a><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><h3 id="No-21-Merge-Two-Sorted-Lists"><a href="#No-21-Merge-Two-Sorted-Lists" class="headerlink" title="No.21 Merge Two Sorted Lists"></a>No.21 Merge Two Sorted Lists</h3><p>“Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.”</p><p>Time Complexity: O(m+n)</p><p>Space Complexity: O(1)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        ListNode *dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode *tail = dummy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">                tail-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = l1 ? l1 : l2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        tail = dummy = ListNode(<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                tail.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line"></span><br><span class="line">            tail = tail.next</span><br><span class="line"></span><br><span class="line">        tail.next = l1 <span class="keyword">or</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h3 id="No-83-Remove-Duplicates-from-Sorted-List"><a href="#No-83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="No.83 Remove Duplicates from Sorted List"></a>No.83 Remove Duplicates from Sorted List</h3><p>“Given a sorted linked list, delete all duplicates such that each element appear<br>only once.”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">deleteDuplicates</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr &amp;&amp; cur-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;val == curr-&gt;next-&gt;val) &#123;</span><br><span class="line">                curr-&gt;next = curr-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr <span class="keyword">and</span> curr.next:</span><br><span class="line">            <span class="keyword">if</span> curr.val == curr.next.val:</span><br><span class="line">                curr.next = curr.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The solutions for LeetCode problems in C++ and Python.&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://wjwrobot.github.io/categories/LeetCode/"/>
    
    
      <category term="Algorithms" scheme="https://wjwrobot.github.io/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="https://wjwrobot.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Rust</title>
    <link href="https://wjwrobot.github.io/2020/02/09/An-Introduction-to-Rust/"/>
    <id>https://wjwrobot.github.io/2020/02/09/An-Introduction-to-Rust/</id>
    <published>2020-02-09T02:37:55.000Z</published>
    <updated>2020-02-20T09:42:08.490Z</updated>
    
    <content type="html"><![CDATA[<p>An Introduction to the Rust language.</p><a id="more"></a><hr><h2 id="Ownership"><a href="#Ownership" class="headerlink" title="Ownership"></a>Ownership</h2><p>Ownership Rules:</p><ul><li>Each value in Rust has a variable that’s called its <em>owner</em>.</li><li>There can only be one owner at a time.</li><li>Where the owner goes out of scope, the value will be droped.</li></ul><h2 id="Memory-and-Allocation"><a href="#Memory-and-Allocation" class="headerlink" title="Memory and Allocation"></a>Memory and Allocation</h2><h3 id="Ways-Variables-and-Data-Interact-Move"><a href="#Ways-Variables-and-Data-Interact-Move" class="headerlink" title="Ways Variables and Data Interact: Move"></a>Ways Variables and Data Interact: Move</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This String's owner from s1 move to s2</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hi"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br></pre></td></tr></table></figure><h3 id="Ways-Variables-and-Data-Interact-Clone"><a href="#Ways-Variables-and-Data-Interact-Clone" class="headerlink" title="Ways Variables and Data Interact: Clone"></a>Ways Variables and Data Interact: Clone</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// do a deeply copy of the heap data of the String (expensive)</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hi"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.clone();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, s1, s2);</span><br></pre></td></tr></table></figure><h3 id="Stack-Only-Data-Copy"><a href="#Stack-Only-Data-Copy" class="headerlink" title="Stack-Only Data: Copy"></a>Stack-Only Data: Copy</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, x, y);</span><br></pre></td></tr></table></figure><h2 id="References-and-Borrowing"><a href="#References-and-Borrowing" class="headerlink" title="References and Borrowing"></a>References and Borrowing</h2><p>Add ampersand before variable let the variable become a reference which refers<br>to the value but does not own it.</p><p>Just as variables are immutable by default, so as references.</p><h3 id="Mutable-References"><a href="#Mutable-References" class="headerlink" title="Mutable References"></a>Mutable References</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hi"</span>);</span><br><span class="line">  change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">  some_string.push_str(<span class="string">", Rust"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A reference’s scope starts from where it is introduced and continues through the<br>last time that reference is used.</p><ul><li>At any given time, you can have either one mutable reference or any number of<br>immutable references.</li><li>References must always be valid.</li></ul><h3 id="Dangling-References"><a href="#Dangling-References" class="headerlink" title="Dangling References"></a>Dangling References</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> reference_to_nothing = dangle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123; <span class="comment">// dangle returns a reference to a String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>); <span class="comment">// s is a new String</span></span><br><span class="line"></span><br><span class="line">    &amp;s <span class="comment">// we return a reference to the String, s</span></span><br><span class="line">&#125; <span class="comment">// Here, s goes out of scope, and is dropped. Its memory goes away.</span></span><br><span class="line">  <span class="comment">// Danger!</span></span><br></pre></td></tr></table></figure><h3 id="The-Slice-Type"><a href="#The-Slice-Type" class="headerlink" title="The Slice Type"></a>The Slice Type</h3><p>A <em>string slice</em> is a reference to part of a <em>String</em>.</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="keyword">let</span> hello = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello world"</span>);</span><br><span class="line">  <span class="keyword">let</span> word = first_word(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123;</span><br><span class="line">    <span class="keyword">if</span> item == <span class="string">b' '</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &amp;s[..i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;s[..]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String literal is slice that has <code>&amp;str</code> type, so it is immutable.</p><p>Change the parameter’s type of function first_word for more general.</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> my_string = <span class="built_in">String</span>::from(<span class="string">"hello world"</span>);</span><br><span class="line">  <span class="keyword">let</span> word = first_word(&amp;my_string[..]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> my_string_literal = <span class="string">"hello world"</span>;</span><br><span class="line">  <span class="keyword">let</span> word = first_word(&amp;my_string_literal[..]);</span><br><span class="line">  <span class="keyword">let</span> word = first_word(my_string_literal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">  <span class="comment">// same as above</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Other slice:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br></pre></td></tr></table></figure></p><p>This slice has the type <em>&amp;[i32]</em></p><hr><h2 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h2><h3 id="Defining-and-Instantiating-Structs"><a href="#Defining-and-Instantiating-Structs" class="headerlink" title="Defining and Instantiating Structs"></a>Defining and Instantiating Structs</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> user1 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"someusername123"</span>),</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user1.email = <span class="built_in">String</span>::from(<span class="string">"a@b.com"</span>);</span><br></pre></td></tr></table></figure><p>Use the <em>field init shorthand</em> syntax when variables and fields have the same name.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">  User &#123;</span><br><span class="line">    email,</span><br><span class="line">    username,</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Create instances from other instances with <em>struct update</em> syntax.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user2 = User &#123;</span><br><span class="line">  email: <span class="built_in">String</span>::from(<span class="string">"another@example.com"</span>),</span><br><span class="line">  username: <span class="built_in">String</span>::from(<span class="string">"anotherusername567"</span>),</span><br><span class="line">  ..user1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>Tuple Struct</code>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Color</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> black = Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> origin = Point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>Structs that don’t have any fields are called <em>unit-like structs</em>.</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>Methods are similar to functions, but they are defined within the context of a<br><code>struct</code> (or an <code>enum</code> or a <em>trait</em> obejct), and their first parameter is always<br><code>self</code>, which represents the instance of the struct the method is being called on.</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">  width: <span class="built_in">u32</span>,</span><br><span class="line">  height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">can_hold</span></span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.width &gt; other.width &amp;&amp; <span class="keyword">self</span>.height &gt; other.height</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span>&#125;;</span><br><span class="line">  <span class="keyword">let</span> rect2 = Rectangle &#123; width: <span class="number">10</span>, height: <span class="number">40</span>&#125;;</span><br><span class="line">  <span class="keyword">let</span> rect3 = Rectangle &#123; width: <span class="number">60</span>, height: <span class="number">45</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, rect1.area());</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, rect1.can_hold(&amp;rect2));</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, rect1.can_hold(&amp;rect3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Associated-Functions"><a href="#Associated-Functions" class="headerlink" title="Associated Functions"></a>Associated Functions</h3><p><em>Associated functions</em> are implemented within <em>impl</em> blocks, which don’t take<br><em>self</em> as a parameter. And they are associated with the <em>struct</em>.</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rectangle &#123;</span><br><span class="line">    Rectangle &#123;width: size, heigtht: size&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Access it with <code>::</code> syntax:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sq = Rectangle::square(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p><code>::</code> syntax is used for both associated functions and namespaces created by modules.</p><hr><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><h3 id="Defining-an-Enum"><a href="#Defining-an-Enum" class="headerlink" title="Defining an Enum"></a>Defining an Enum</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">  V4,</span><br><span class="line">  V6,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">  kind: IpAddrKind,</span><br><span class="line">  address: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> home = IpAddr &#123;</span><br><span class="line">  kind: IpAddrKind::V4,</span><br><span class="line">  address: <span class="built_in">String</span>::from(<span class="string">"127.0.0.1"</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Putting data directly into each enum variant.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">String</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> home = IpAddr::V4(<span class="built_in">String</span>::from(<span class="string">"127.0.0.1"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loopback = IpAddr::V6(<span class="built_in">String</span>::from(<span class="string">"::1"</span>));</span><br></pre></td></tr></table></figure></p><p>Each variant can have different types and amounts of associated data.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> home = IpAddr::V4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loopback = IpAddr::V6(<span class="built_in">String</span>::from(<span class="string">"::1"</span>));</span><br></pre></td></tr></table></figure></p><p>The <code>Option</code> Enum:</p><p>It is defined by the standard library.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="literal">Some</span>(T),</span><br><span class="line">  <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> some_number = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> some_string = <span class="literal">Some</span>(<span class="string">"a string"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> absent_number: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; = <span class="literal">None</span>;</span><br></pre></td></tr></table></figure><h3 id="The-match-Control-Flow-Operator"><a href="#The-match-Control-Flow-Operator" class="headerlink" title="The match Control Flow Operator"></a>The match Control Flow Operator</h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">  Penny,</span><br><span class="line">  Nickel,</span><br><span class="line">  Dime,</span><br><span class="line">  Quarter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">  <span class="keyword">match</span> coin &#123;</span><br><span class="line">    Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">    Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">    Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">    Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">  <span class="keyword">match</span> coin &#123;</span><br><span class="line">    Coin::Penny =&gt; &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">"Lucky penny!"</span>);</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">    Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">    Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pattern that bind to values:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="comment">// so we can inspect the state in a minute</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UsState</span></span> &#123;</span><br><span class="line">  Alabama,</span><br><span class="line">  Alaska,</span><br><span class="line">  <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">  Penny,</span><br><span class="line">  Nickel,</span><br><span class="line">  Dime,</span><br><span class="line">  Quarter(UsState),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">  <span class="keyword">match</span> coin &#123;</span><br><span class="line">    Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">    Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">    Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">    Coin::Quarter(state) =&gt; &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state);</span><br><span class="line">      <span class="number">25</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Call it with<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value_in_cents(Coin::Quarter(UsState::Alaska))</span><br></pre></td></tr></table></figure></p><p>Matching with <code>Option&lt;T&gt;</code>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">    <span class="literal">Some</span>(i) =&gt; <span class="literal">Some</span>(i + <span class="number">1</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> six = plus_one(five);</span><br><span class="line"><span class="keyword">let</span> none = plus_one(<span class="literal">None</span>);</span><br></pre></td></tr></table></figure></p><p>The <code>_</code> Placeholder<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> some_u8_value = <span class="number">0u8</span>;</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">"one"</span>),</span><br><span class="line">  <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">"three"</span>),</span><br><span class="line">  <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">"five"</span>),</span><br><span class="line">  <span class="number">7</span> =&gt; <span class="built_in">println!</span>(<span class="string">"seven"</span>),</span><br><span class="line">  _ =&gt; (), <span class="comment">// () is the unit value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Concise-Control-Flow-with-if-let"><a href="#Concise-Control-Flow-with-if-let" class="headerlink" title="Concise Control Flow with if let"></a>Concise Control Flow with <code>if let</code></h3><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> some_u8_value = <span class="literal">Some</span>(<span class="number">0u8</span>);</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">  <span class="literal">Some</span>(<span class="number">3</span>) =&gt; <span class="built_in">println!</span>(<span class="string">"three"</span>),</span><br><span class="line">  _ =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(<span class="number">3</span>) = some_u8_value &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"three"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">match</span> coin &#123;</span><br><span class="line">  Coin::Quarter(state) =&gt; <span class="built_in">println!</span>(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state),</span><br><span class="line">  _ =&gt; count += <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>same as above<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> Coin::Quarter(state) = coin &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Managing-Growing-Projects-with-Packages-Crates-and-Modules"><a href="#Managing-Growing-Projects-with-Packages-Crates-and-Modules" class="headerlink" title="Managing Growing Projects with Packages, Crates, and Modules"></a>Managing Growing Projects with Packages, Crates, and Modules</h2><p><em>Module System</em>:</p><ul><li><em>Packages</em>: A Cargo feature that lets you build, test, and share crates</li><li><em>Crates</em>: A tree of modules that produces a library or executable</li><li><em>Modules</em> and <em>use</em>: Let you control the organization, scope, and privacy of<br>paths</li><li><em>Paths</em>: A way of naming an item, such as a struct, function, or module</li></ul><h3 id="Packages-and-Crates"><a href="#Packages-and-Crates" class="headerlink" title="Packages and Crates"></a>Packages and Crates</h3><p>A <em>crate</em> is a binary or library.</p><p>A <em>package</em> is one or more crates that provide a set of functionality. A package<br>contains a <em>Cargo.toml</em> file that describes how to build those crates.</p><p>A package can contain multiple binary crates and optionally one library crate. It<br>must contain at least one crate (either library or binary).</p><p>Use the following command to create a package:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new your_project_name</span><br></pre></td></tr></table></figure></p><p><em>src/main.rs</em> is the crate root of a binary crate with the same name as the package.<br>whereas, <em>src/lib.rs</em> the crate root of a library crate. Cargo passes the crate<br>root files to <code>rustc</code> to build the library or binary. A package can have multiple<br>binary crates by replacing files in the <em>src/bin</em> directory: each file will be a<br>separate binary crate.</p><p>A crate will group related functionality together in a scope so the functionality<br>is easy to share between multiple projects.</p><h3 id="Defining-Modules-to-Control-Scope-and-Privacy"><a href="#Defining-Modules-to-Control-Scope-and-Privacy" class="headerlink" title="Defining Modules to Control Scope and Privacy"></a>Defining Modules to Control Scope and Privacy</h3><p>The <code>use</code> keyword brings a path into scope; and the <code>pub</code> keyword makes items public.</p><p><em>Modules</em> let us organize code within a crate into groups for readability and<br>easy reuse. Modules also control the privacy of items, which is whether an item<br>can be used by outside code (<em>public</em>) or not (<em>private</em>).</p><p>To create a new library named restaurant by typing the following command:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new --lib restaurant</span><br></pre></td></tr></table></figure></p><p>In src/lib.rs:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">  <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">seat_at_table</span></span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">mod</span> serving &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">take_order</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">serve_order</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">take_payment</span></span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Modules can contain other modules within it. It can also hold definitions for<br>other items, such as structs, enums, constants, traits, or functions.</p><p><em>src/main.rs</em> and <em>src/lib.rs</em> are called <em>crate roots</em>. Because the contents of<br>either of these two files form a module named <code>crate</code> at the root of the crate’s<br>module structure, known as the <em>module tree</em>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">crate</span><br><span class="line"> └── front_of_house</span><br><span class="line">     ├── hosting</span><br><span class="line">     │   ├── add_to_waitlist</span><br><span class="line">     │   └── seat_at_table</span><br><span class="line">     └── serving</span><br><span class="line">         ├── take_order</span><br><span class="line">         ├── serve_order</span><br><span class="line">         └── take_payment</span><br></pre></td></tr></table></figure></p><h3 id="Paths-for-Referring-to-an-Item-in-the-Module-Tree"><a href="#Paths-for-Referring-to-an-Item-in-the-Module-Tree" class="headerlink" title="Paths for Referring to an Item in the Module Tree"></a>Paths for Referring to an Item in the Module Tree</h3><p>A path can take two forms:</p><ul><li>An <em>absolute path</em> starts from a crate root by using a crate name or a literal<br><em>crate</em>.</li><li>A <em>relative path</em> starts from the current module and uses <code>self</code>, <code>super</code>, or<br>an identifier in the current module.</li></ul><p>Items (functions, methods, structs, enums, modules, and constants) in a parent<br>module can’t use the private items inside child modules, however, items in child<br>modules can use the items in their ancestor modules. All items are private by default.</p><p>Exposing Paths with the <code>pub</code> keyword:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">  <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">  <span class="comment">// absolute path</span></span><br><span class="line">  crate::front_of_house::hosting::add_to_waitlist();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// relative path</span></span><br><span class="line">  front_of_house::hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Starting relative paths with <code>super</code>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">serve_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> back_of_house &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">fix_incorrect_order</span></span>() &#123;</span><br><span class="line">    cook_order();</span><br><span class="line">    super::serve_order();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">cook_order</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Making structs and enums public<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> back_of_house &#123;</span><br><span class="line">  <span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Breakfast</span></span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> toast: <span class="built_in">String</span>,</span><br><span class="line">    seasonal_fruit: <span class="built_in">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">impl</span> Breakfast &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">summer</span></span>(toast: &amp;<span class="built_in">str</span>) -&gt; Breakfast &#123;</span><br><span class="line">      Breakfast &#123;</span><br><span class="line">        toast: <span class="built_in">String</span>::from(toast),</span><br><span class="line">        seasonal_fruit: <span class="built_in">String</span>::from(<span class="string">"peaches"</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> meal = back_of_house::Breakfast::summer(<span class="string">"Rye"</span>);</span><br><span class="line">  meal.toast = <span class="built_in">String</span>::from(<span class="string">"Wheat"</span>);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"I'd like &#123;&#125; toast please"</span>, meal.toast);</span><br><span class="line"></span><br><span class="line">  meal.seasonal_fruit = <span class="built_in">String</span>::from(<span class="string">"blueberries"</span>); <span class="comment">// it doesn't work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In contrast, if we make an enum public, all of its variants are then public.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> back_of_house &#123;</span><br><span class="line">  <span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Apptizer</span></span> &#123;</span><br><span class="line">    Soup,</span><br><span class="line">    Salad,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> order1 = back_of_house::Apptizer::Soup;</span><br><span class="line">  <span class="keyword">let</span> order2 = back_of_house::Apptizer::Salad;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Bringing paths into scope with the <code>use</code> keyword:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">  <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">  hosting::add_to_waitlist();</span><br><span class="line">  hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Providing new names with the <code>as</code> keyword:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="built_in">Result</span>;</span><br><span class="line"><span class="keyword">use</span> std::io::<span class="built_in">Result</span> <span class="keyword">as</span> IoResult;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function1</span></span>() -&gt; <span class="built_in">Result</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function2</span></span>() -&gt; IoResult&lt;()&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>Re-exporting names with <code>pub use</code>:</p><p>When we bring a name into scope with the <code>use</code> keyword, the name available in the<br>new scope is private. To make it available for other code that calls our code,<br>we can combine <code>pub</code> and <code>use</code>.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">  <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">  hosting::add_to_waitlist();</span><br><span class="line">  hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using external packages:</p><p>Listing external packages’ name in your package’s <em>Cargo.toml</em> file and using<br><code>use</code> to bring items into scope.</p><p>The standard library (<code>std</code>) is also a crate that’s external to our package, but<br>it is shipped with the Rust language. So we only need to bring items within it<br>into scope with <code>use</code>.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br></pre></td></tr></table></figure></p><p>Using nested paths to clean up large <code>use</code> lists:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;cmp::Ordering, io&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, Write&#125;;</span><br></pre></td></tr></table></figure><p>equal to<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Write;</span><br></pre></td></tr></table></figure></p><p>The glob operator:</p><p>Bring <em>all</em> public items defined in a path into scope.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::*;</span><br></pre></td></tr></table></figure></p><h3 id="Separating-Modules-into-Different-Files"><a href="#Separating-Modules-into-Different-Files" class="headerlink" title="Separating Modules into Different Files"></a>Separating Modules into Different Files</h3><p>In <em>src/lib.rs</em>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declaring the "front_of_house" module whose body will be in</span></span><br><span class="line"><span class="comment">// "src/front_of_house.rs" file</span></span><br><span class="line"><span class="keyword">mod</span> front_of_house;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">  hosting::add_to_waitlist() &#123;&#125;;</span><br><span class="line">  hosting::add_to_waitlist() &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In <em>src/front_of_house.rs</em>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">  <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You can continue this process:</p><p>In <em>src/front_of_house.rs</em>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting;</span><br></pre></td></tr></table></figure></p><p>In <em>src/front_of_house/hosting.rs</em>:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>Rust lets you split a package into multiple crates and a crate into modules.</p><hr><h2 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common Collections"></a>Common Collections</h2><p>Unlike the build-in array and tuple types, the data these collections point to<br>is stored on the <em>heap</em>, which means the amount of data does not need to be known<br>at compile time and can grow or shrink as the program runs.</p><ul><li>A <em>vector</em> allows you to store a variable number of values next to each other.</li><li>A <em>string</em> is a collection of characters.</li><li>A <em>hash map</em> allows you to associate a value with a particular key.</li></ul><h3 id="Storing-Lists-of-Values-with-Vectors"><a href="#Storing-Lists-of-Values-with-Vectors" class="headerlink" title="Storing Lists of Values with Vectors"></a>Storing Lists of Values with Vectors</h3><p><code>Vec&lt;T&gt;</code>:</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::new() <span class="comment">// must add type annotation here</span></span><br></pre></td></tr></table></figure><p>using <code>vec!</code> macro<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the type of v is Vec&lt;i32&gt;</span></span><br><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">Vec</span>::new();</span><br><span class="line">v.push(<span class="number">2</span>);</span><br><span class="line">v.push(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>A vector is freed when it goes out of scope. When it gets dropped, all of its<br>contents are also dropped.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125; <span class="comment">// v goes out of scope and is freed here</span></span><br></pre></td></tr></table></figure></p><p>There are two ways to reference a value stored in a vector: indexing syntax and<br><code>get</code> method (return an <em>Option&lt;&amp;T&gt;</em>).<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// indexing syntax</span></span><br><span class="line"><span class="keyword">let</span> third: &amp;<span class="built_in">i32</span> = &amp;v[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The third element is &#123;&#125;"</span>, third);</span><br><span class="line"></span><br><span class="line"><span class="comment">// "get" method</span></span><br><span class="line"><span class="keyword">match</span> v.get(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="literal">Some</span>(third) =&gt; <span class="built_in">println!</span>(<span class="string">"The third element is &#123;&#125;"</span>, third),</span><br><span class="line">  <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"There is no third element."</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> does_not_exist = &amp;v[<span class="number">10</span>];  <span class="comment">// crash</span></span><br><span class="line"><span class="keyword">let</span> does_not_exist = v.get(<span class="number">10</span>);  <span class="comment">// return "None"</span></span><br></pre></td></tr></table></figure><p>The following code can’t work:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> first = &amp;v[<span class="number">0</span>];  <span class="comment">// immutable borrow</span></span><br><span class="line">v.push(<span class="number">6</span>);  <span class="comment">// mutable borrow</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"The first element is: &#123;&#125;"</span>, first);</span><br></pre></td></tr></table></figure></p><p>Iterating over the values in a vector:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &amp;v &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v &#123;</span><br><span class="line">  *i += <span class="number">50</span>;  <span class="comment">// "*" is dereference operator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using an enum to store multiple types:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SpreadsheetCell</span></span> &#123;</span><br><span class="line">  Int(<span class="built_in">i32</span>),</span><br><span class="line">  Float(<span class="built_in">f64</span>),</span><br><span class="line">  Text(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> row = <span class="built_in">vec!</span>[</span><br><span class="line">  SpreadsheetCell::Int(<span class="number">3</span>),</span><br><span class="line">  SpreadsheetCell::Text(<span class="built_in">String</span>::from(<span class="string">"blue"</span>)),</span><br><span class="line">  SpreadsheetCell::Float(<span class="number">10.12</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><hr><h2 id="Generic-Types-Traits-and-Lifetimes"><a href="#Generic-Types-Traits-and-Lifetimes" class="headerlink" title="Generic Types, Traits, and Lifetimes"></a>Generic Types, Traits, and Lifetimes</h2><h3 id="Generic-Data-Types"><a href="#Generic-Data-Types" class="headerlink" title="Generic Data Types"></a>Generic Data Types</h3><p>In <em>function</em> definitions:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">largest</span></span>&lt;T: <span class="built_in">PartialOrd</span>&gt;(list: &amp;[T]) -&gt; T &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> largest = list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.iter() &#123;</span><br><span class="line">    <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">      largest = item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  largest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In <em>struct</em> definitions:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T, U&gt; &#123;</span><br><span class="line">  x: T,</span><br><span class="line">  y: U,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In <em>enum</em> definitions:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span></span>&lt;T, E&gt; &#123;</span><br><span class="line">  <span class="literal">Ok</span>(T),</span><br><span class="line">  <span class="literal">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In <em>method</em> definitions:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T&gt; &#123;</span><br><span class="line">  x: T,</span><br><span class="line">  y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">x</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;T &#123;</span><br><span class="line">    &amp;<span class="keyword">self</span>.x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>or we could implement methods only on <em>Point<f32></f32></em> instances<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Point&lt;<span class="built_in">f32</span>&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">distance_from_origin</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">f32</span> &#123;</span><br><span class="line">    (<span class="keyword">self</span>.x.powi(<span class="number">2</span>) + <span class="keyword">self</span>.y.powi(<span class="number">2</span>)).sqrt()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Traits-Defining-Shared-Behavior"><a href="#Traits-Defining-Shared-Behavior" class="headerlink" title="Traits: Defining Shared Behavior"></a>Traits: Defining Shared Behavior</h3><p>Defining a trait:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Implementing a trait on a type:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NewsArticle</span></span> &#123;</span><br><span class="line">  <span class="keyword">pub</span> headline: <span class="built_in">String</span>,</span><br><span class="line">  <span class="keyword">pub</span> location: <span class="built_in">String</span>,</span><br><span class="line">  <span class="keyword">pub</span> author: <span class="built_in">String</span>,</span><br><span class="line">  <span class="keyword">pub</span> content: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> NewsArticle &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"&#123;&#125;, by &#123;&#125; (&#123;&#125;)"</span>, <span class="keyword">self</span>.headline, <span class="keyword">self</span>.author, <span class="keyword">self</span>.location)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tweet</span></span> &#123;</span><br><span class="line">  <span class="keyword">pub</span> username: <span class="built_in">String</span>,</span><br><span class="line">  <span class="keyword">pub</span> content: <span class="built_in">String</span>,</span><br><span class="line">  <span class="keyword">pub</span> reply: <span class="built_in">bool</span>,</span><br><span class="line">  <span class="keyword">pub</span> retweet: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> Tweet &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, <span class="keyword">self</span>.username, <span class="keyword">self</span>.content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>Warning</em>:<br>One restriction to note with <em>trait</em> implementations is that we can implement a<br>trait on a type only if either the trait or the type is local to our crate. In<br>other words, we can’t implement external traits on external types.</p><p>Default implementations:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="built_in">String</span>::from(<span class="string">"(Read more...)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>To use a default implementation<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> NewsArticle &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>Default implementations can call other methods in the same trait, even if those<br>other methods don’t have a default implementation.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize_author</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span>;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"(Read more from &#123;&#125;...)"</span>, <span class="keyword">self</span>.summarize_author())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> Tweet &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">summarize_author</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"@&#123;&#125;"</span>, <span class="keyword">self</span>.usename)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Traits as parameters:</p><p>Define a <em>notify</em> funciton that calls the <em>summarize</em> method on its <em>item</em><br>parameter, which is of some type that implements the <em>Summary</em> trait. Use<br><code>impl Trait</code> syntax.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>(item: <span class="keyword">impl</span> Summary) &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"Breaking news! &#123;&#125;"</span>, item.summarize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(<em>item</em> parameter accepts any type that implements the specified trait.)</p><p><em>Trait bound</em> syntax:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>&lt;T: Summary&gt;(item: T) &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"Breaking news! &#123;&#125;"</span>, item.summarize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Specifying multiple trait bounds with the <em>+</em> syntax:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>(item: <span class="keyword">impl</span> Summary + Display) &#123;&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>&lt;T: Summary + Display&gt;(item: T) &#123;&#125;</span><br></pre></td></tr></table></figure><p>Clearer trait bounds with <code>where</code> clauses:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">some_function</span></span>&lt;T, U&gt;(t: T, u: U) -&gt; <span class="built_in">i32</span></span><br><span class="line">  <span class="keyword">where</span> T: Display + <span class="built_in">Clone</span>,</span><br><span class="line">        U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>instead of<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">some_function</span></span>&lt;T: Display + <span class="built_in">Clone</span>, U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span>&gt;(t: T, u: U) -&gt; <span class="built_in">i32</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>Returning types that implement traits:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">returns_summarizable</span></span>() -&gt; <span class="keyword">impl</span> Summary &#123;</span><br><span class="line">  Tweet &#123;</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"horse_ebooks"</span>),</span><br><span class="line">    content: <span class="built_in">String</span>::from(<span class="string">"of course, as you probably already know, people"</span>),</span><br><span class="line">    reply: <span class="literal">false</span>,</span><br><span class="line">    retweet: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Using trait bounds to conditionally implement methods:<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pair</span></span>&lt;T&gt; &#123;</span><br><span class="line">  x: T,</span><br><span class="line">  y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Pair&lt;T&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(x: T, y: T) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">    <span class="keyword">Self</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: Display + <span class="built_in">PartialOrd</span>&gt; Pair&lt;T&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">cmp_display</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.x &gt;= <span class="keyword">self</span>.y &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">"The largest member is x = &#123;&#125;"</span>, <span class="keyword">self</span>.x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">"The largest member is y = &#123;&#125;"</span>, <span class="keyword">self</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>blanket implementations</em>:<br>(conditionally implement a trait for any type that implements another trait.)<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T: Display&gt; <span class="built_in">ToString</span> <span class="keyword">for</span> T &#123;</span><br><span class="line">  <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Validating-References-with-Lifetimes"><a href="#Validating-References-with-Lifetimes" class="headerlink" title="Validating References with Lifetimes"></a>Validating References with Lifetimes</h3><h4 id="Preventing-Dangling-References-with-Lifetimes"><a href="#Preventing-Dangling-References-with-Lifetimes" class="headerlink" title="Preventing Dangling References with Lifetimes"></a>Preventing Dangling References with Lifetimes</h4><p>The following code is wrong<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> r;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    r = &amp;x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"r: &#123;&#125;"</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="The-Borrow-Checker"><a href="#The-Borrow-Checker" class="headerlink" title="The Borrow Checker"></a>The Borrow Checker</h4><p>The Rust compiler has a <em>borrow checker</em> that compares scopes to determine<br>whether all borrows are valid.</p><h4 id="Generic-Lifetimes-in-Functions"><a href="#Generic-Lifetimes-in-Functions" class="headerlink" title="Generic Lifetimes in Functions"></a>Generic Lifetimes in Functions</h4><h4 id="Lifetime-Annotation-Syntax"><a href="#Lifetime-Annotation-Syntax" class="headerlink" title="Lifetime Annotation Syntax"></a>Lifetime Annotation Syntax</h4><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="symbol">'a</span> <span class="keyword">mut</span> <span class="built_in">i32</span> <span class="comment">// a mutable reference with an explicit lifetime</span></span><br></pre></td></tr></table></figure><h4 id="Lifetime-Annotations-in-Function-Signatures"><a href="#Lifetime-Annotations-in-Function-Signatures" class="headerlink" title="Lifetime Annotations in Function Signatures"></a>Lifetime Annotations in Function Signatures</h4><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">longest</span></span>&lt;<span class="symbol">'a</span>&gt;(x: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>, y: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> x.len() &gt; y.len() &#123;</span><br><span class="line">    x</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we pass concrete references to <em>longest</em>, the concrete lifetime that is<br>substituted for <em>‘a</em> is the part of the scope of <em>x</em> that overlaps with the scope<br>of <em>y</em>.</p><h4 id="Thinking-in-Terms-of-Lifetimes"><a href="#Thinking-in-Terms-of-Lifetimes" class="headerlink" title="Thinking in Terms of Lifetimes"></a>Thinking in Terms of Lifetimes</h4><p>When returning a reference from a function, the lifetime parameter for the return<br>type needs to match the lifetime parameter for one of the parameters.</p><h4 id="Lifetime-Annotations-in-Struct-Definitions"><a href="#Lifetime-Annotations-in-Struct-Definitions" class="headerlink" title="Lifetime Annotations in Struct Definitions"></a>Lifetime Annotations in Struct Definitions</h4><p>It’s possible for structs to hold references, but in that case we would need to<br>add a lifetime annotation on every reference in the struct’s definition.<br><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ImportantExcerpt</span></span>&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">  part: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> novel = <span class="built_in">String</span>::from(<span class="string">"Call me Rick. Some years ago..."</span>);</span><br><span class="line">  <span class="keyword">let</span> first_sentence = novel.split(<span class="string">'.'</span>)</span><br><span class="line">      .next()</span><br><span class="line">      .expect(<span class="string">"Could not find a '.'"</span>);</span><br><span class="line">  <span class="keyword">let</span> i = ImportantExcerpt &#123; part: first_sentence &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(This annotation means an instance of <em>ImportantExcerpt</em> can’t outlive the<br>reference it holds in its <em>part</em> field.)</p><h4 id="Lifetime-Elision"><a href="#Lifetime-Elision" class="headerlink" title="Lifetime Elision"></a>Lifetime Elision</h4><p>Lifetimes on function or method parameters are called <em>input lifetimes</em>, and<br>lifetimes on return values are called <em>output lifetimes</em>.</p><p>The compiler uses three rules to figure out what lifetimes references have when<br>there aren’t explicit annotations. The first one is that each parameter that is<br>a reference gets its own lifetime parameter. The second one is if there is exactly<br>one input lifetime parameter, that lifetime is assigned to all output lifetime<br>parameters. The third one is if there are multiple input lifetime parameters, but<br>one of them is <code>&amp;self</code> or <code>&amp;mut self</code> because this is a method, the lifetime of<br><code>self</code> is assigned to all output lifetime parameters.</p><h4 id="Lifetime-Annotations-in-Method-Definitions"><a href="#Lifetime-Annotations-in-Method-Definitions" class="headerlink" title="Lifetime Annotations in Method Definitions"></a>Lifetime Annotations in Method Definitions</h4><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">'a</span>&gt; ImportantExcerpt&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">announce_and_return_part</span></span>(&amp;<span class="keyword">self</span>, announcement: &amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Attention please: &#123;&#125;"</span>, announcement);</span><br><span class="line">    <span class="keyword">self</span>.part</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(The return type gets the lifetime of <em>&amp;self</em>)</p><h4 id="The-Static-Lifetime"><a href="#The-Static-Lifetime" class="headerlink" title="The Static Lifetime"></a>The Static Lifetime</h4><p><code>&#39;static</code> lifetime means that this reference can live for the entire duration of<br>the program. All string literals have the <code>&#39;static</code> lifetime.</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s: &amp;<span class="symbol">'static</span> <span class="built_in">str</span> = <span class="string">"I have a static lifetime."</span>;</span><br></pre></td></tr></table></figure><h4 id="Generic-Type-Parameters-Trait-Bounds-and-Lifetimes-Together"><a href="#Generic-Type-Parameters-Trait-Bounds-and-Lifetimes-Together" class="headerlink" title="Generic Type Parameters, Trait Bounds, and Lifetimes Together"></a>Generic Type Parameters, Trait Bounds, and Lifetimes Together</h4><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">longest_with_an_announcement</span></span>&lt;<span class="symbol">'a</span>, T&gt;(x: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>, y: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>, ann: T) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span></span><br><span class="line">  <span class="keyword">where</span> T: Display</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"Announcement! &#123;&#125;"</span>, ann);</span><br><span class="line">  <span class="keyword">if</span> x.len() &gt; y.len() &#123;</span><br><span class="line">    x</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Writing-Automated-Tests"><a href="#Writing-Automated-Tests" class="headerlink" title="Writing Automated Tests"></a>Writing Automated Tests</h2><h3 id="How-to-Write-Tests"><a href="#How-to-Write-Tests" class="headerlink" title="How to Write Tests"></a>How to Write Tests</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://doc.rust-lang.org/book/title-page.html" target="_blank" rel="noopener">The Rust Programming Language</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An Introduction to the Rust language.&lt;/p&gt;
    
    </summary>
    
      <category term="Rust" scheme="https://wjwrobot.github.io/categories/Rust/"/>
    
    
      <category term="Rust" scheme="https://wjwrobot.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch Basic</title>
    <link href="https://wjwrobot.github.io/2020/02/03/PyTorch-Basic/"/>
    <id>https://wjwrobot.github.io/2020/02/03/PyTorch-Basic/</id>
    <published>2020-02-03T11:54:39.000Z</published>
    <updated>2020-02-03T12:39:03.506Z</updated>
    
    <content type="html"><![CDATA[<p>Basic knowledges about PyTorch.</p><a id="more"></a><h2 id="Saving-amp-loading-models"><a href="#Saving-amp-loading-models" class="headerlink" title="Saving &amp; loading models"></a>Saving &amp; loading models</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    super().__init__()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">model = Net()</span><br><span class="line"></span><br><span class="line"><span class="comment"># optimizer</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">torch</span><br></pre></td></tr></table></figure><h3 id="Method-1-Saving-amp-loading-model’s-parameters"><a href="#Method-1-Saving-amp-loading-model’s-parameters" class="headerlink" title="Method 1: Saving &amp; loading model’s parameters"></a>Method 1: Saving &amp; loading model’s parameters</h3><p>Use <code>state_dict</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save</span></span><br><span class="line">torch.save(model.state_dict(), PATH) <span class="comment"># use .pt or .pth as file extension</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load</span></span><br><span class="line">model = Net(*args, **kwargs)</span><br><span class="line">model.load_state_dict(torch.load(PATH))</span><br><span class="line"><span class="comment"># must call it to set dropout and batch normalization layers to evaluation mode</span></span><br><span class="line"><span class="comment"># before running inference</span></span><br><span class="line">model.eval()</span><br></pre></td></tr></table></figure><h3 id="Method-2-Saving-amp-loading-entile-model"><a href="#Method-2-Saving-amp-loading-entile-model" class="headerlink" title="Method 2: Saving &amp; loading entile model"></a>Method 2: Saving &amp; loading entile model</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save</span></span><br><span class="line">torch.save(model, PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model must be defined somewhere</span></span><br><span class="line">model = torch.load(PATH)</span><br><span class="line">model.eval()</span><br></pre></td></tr></table></figure><h3 id="Saving-amp-loading-a-general-checkpoint-for-inference-and-or-resuming-training"><a href="#Saving-amp-loading-a-general-checkpoint-for-inference-and-or-resuming-training" class="headerlink" title="Saving &amp; loading a general checkpoint for inference and/or resuming training"></a>Saving &amp; loading a general checkpoint for inference and/or resuming training</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save</span></span><br><span class="line">torch.save(&#123;</span><br><span class="line">            <span class="string">'epoch'</span>: epoch,</span><br><span class="line">            <span class="string">'model_state_dict'</span>: model.state_dict(),</span><br><span class="line">            <span class="string">'optimizer_state_dict'</span>: optimizer.state_dict(),</span><br><span class="line">            <span class="string">'loss'</span>: loss,</span><br><span class="line">            ...</span><br><span class="line">            &#125;, PATH) <span class="comment"># use .tar as file extension</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load</span></span><br><span class="line">model = Net(*args, **kwargs)</span><br><span class="line">optimizer = TheOptimizerClass(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">checkpoint = torch.load(PATH)</span><br><span class="line">model.load_state_dict(checkpoint[<span class="string">'model_state_dict'</span>])</span><br><span class="line">optimizer.load_state_dict(checkpoint[<span class="string">'optimizer_state_dict'</span>])</span><br><span class="line">epoch = checkpoint[<span class="string">'epoch'</span>]</span><br><span class="line">loss = checkpoint[<span class="string">'loss'</span>]</span><br><span class="line"></span><br><span class="line">model.eval()</span><br><span class="line"><span class="comment"># - or -</span></span><br><span class="line">model.train()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://pytorch.org/tutorials/beginner/saving_loading_models.html" target="_blank" rel="noopener">Saving and loading models</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Basic knowledges about PyTorch.&lt;/p&gt;
    
    </summary>
    
      <category term="PyTorch" scheme="https://wjwrobot.github.io/categories/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="https://wjwrobot.github.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>C++ Type Casting</title>
    <link href="https://wjwrobot.github.io/2020/02/02/C-Type-Casting/"/>
    <id>https://wjwrobot.github.io/2020/02/02/C-Type-Casting/</id>
    <published>2020-02-02T07:50:11.000Z</published>
    <updated>2020-02-02T13:16:21.626Z</updated>
    
    <content type="html"><![CDATA[<p>An introduction to C++ type casting.</p><a id="more"></a><p>(Declare: all code snippets in this post come from <a href="http://www.cplusplus.com/doc/tutorial/typecasting/" target="_blank" rel="noopener">this</a>)</p><h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><p>Unrestricted explit type-casting allows to convert any pointer into any other<br>pointer type, independently of the types they point to. Which may make either<br>run-time error or unexpected behaviors.</p><p>In order to control type conversions between classes, We have four specific<br>casting operators: <code>dynamic_cast</code>, <code>static_cast</code>, <code>reinterpret_cast</code> and<br><code>const_cast</code>. Their format is like <code>dynamic_cast&lt;new_type&gt;(expression)</code>.</p><h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p><code>dynamic_cast</code> performs run time check.</p><p>“<code>dynamic_cast</code> can only be used with pointers and references to classes<br>(or with void*). Its purpose is to ensure that the result of the type conversion<br>points to a valid complete object of the destination pointer type.”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dynamic_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dummy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Base* pba = <span class="keyword">new</span> Derived;</span><br><span class="line">    Base* pbb = <span class="keyword">new</span> Base;</span><br><span class="line">    Derived* pd;</span><br><span class="line"></span><br><span class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pba);  <span class="comment">// downcast</span></span><br><span class="line">    <span class="keyword">if</span> (pd == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Null pointer on first type-cast.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pd = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pbb);  <span class="comment">// downcast</span></span><br><span class="line">    <span class="keyword">if</span> (pd == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Null pointer on second type-cast.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (exception&amp; e) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Exception: "</span> &lt;&lt; e.what();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Only the first one is successful, because after type casting the first one is<br>pointing to a full object of class <em>Derived</em>, meanwhile, the second one is<br>pointing to an object of class <em>Base</em>, which is incompleted against <em>Derived</em>.</p><p>“When <code>dynamic_cast</code> cannot cast a pointer because it is not a complete object<br>of the required class, it returns a <em>null pointer</em> to indicate the failure. If<br><code>dynamic_cast</code> is used to convert to a reference type and the conversion is not<br>possible, an exception of type <em>bad_cast</em> is thrown instead.</p><p><code>dynamic_cast</code> can also perform the other <em>implict casts</em> allowed on pointers.<br>“</p><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p><code>static_cast</code> performs compile time check.</p><p>“<code>static_cast</code> can perform conversions between pointers to related classes, not<br>only <em>upcasts</em> (from pointer-to-derived to pointer-to-base),but also downcasts.<br>No checks are performed during runtime to guarantee that the object being<br>converted is in fact a full object of the destination type. Therefore, it is up<br>to the programmer to ensure that the conversion is safe. On the other side, it<br>does not incur the overhead of the type-safety checks of <code>dynamic_cast</code>.”</p><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>Remove or add <em>const</em>.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://www.cplusplus.com/doc/tutorial/typecasting/" target="_blank" rel="noopener">Type conversions</a></p><p><a href="https://www.youtube.com/watch?v=pWZS1MtxI-A&amp;list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb&amp;index=69" target="_blank" rel="noopener">Casting in C++</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An introduction to C++ type casting.&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://wjwrobot.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wjwrobot.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Link Static/Dynamic Library in C/C++ on Linux</title>
    <link href="https://wjwrobot.github.io/2020/01/28/Link-Static-Dynamic-Library-in-C-C-on-Linux/"/>
    <id>https://wjwrobot.github.io/2020/01/28/Link-Static-Dynamic-Library-in-C-C-on-Linux/</id>
    <published>2020-01-28T07:08:12.000Z</published>
    <updated>2020-01-28T07:12:07.938Z</updated>
    
    <content type="html"><![CDATA[<p>Note about link library in C/C++.<br><a id="more"></a></p><h2 id="Link-Static-Dynamic-Library-in-C-C-using-GCC-Compiler"><a href="#Link-Static-Dynamic-Library-in-C-C-using-GCC-Compiler" class="headerlink" title="Link Static/Dynamic Library in C/C++ using GCC Compiler"></a>Link Static/Dynamic Library in C/C++ using GCC Compiler</h2><h3 id="Static-Library"><a href="#Static-Library" class="headerlink" title="Static Library"></a>Static Library</h3><p>A static library is basically an archive (like a zip file) of object files, which are compiled from the <em>.c/</em>.cpp source code.</p><p>Compile files into *.o object files.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test1.cpp test2.cpp</span><br></pre></td></tr></table></figure></p><p>(The <em>-c</em> switch means: Compile and assemble, but do not link.)</p><p>Thus, we get two files test1.o and test2.o.</p><p>Now, we can use <strong>ar</strong> to put these object files together into a single static library.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rsv testlib.a test1.o test2.o</span><br></pre></td></tr></table></figure><p>Now the testlib.a contains test1.o and test2.o.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test.out test.c testlib.a</span><br></pre></td></tr></table></figure><p>Alternatively, you could use the explicity linking options to link the static library (<strong>-L</strong> switch specifies the static library path and <strong>-l</strong> followed by the name of the static library):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o test.out test.c -L. -ltestlib</span><br></pre></td></tr></table></figure><p>The static library is distributed with a function declaration header files <em>.h, so that you know how to invoke them and the compiler takes care of them e.g. linking </em>.a static libraries into your executables.</p><h3 id="Dynamic-Link-Library"><a href="#Dynamic-Link-Library" class="headerlink" title="Dynamic Link Library"></a>Dynamic Link Library</h3><p>The Dynamic Link Library (DLL) is stored separately from the target application and shared among different applications, compared to Static Library. The DLL is the file extension on Windows while on Linux, it is *.so (Shared Object).</p><p>The <em>.so/</em>.dll can be loaded right before the application starts or during the application’s runtime. On Windows, the Win32 API LoadLibrary is used while on Linux gcc compiler, the dlopen function is used.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libhello.so -fPIC hello.c</span><br></pre></td></tr></table></figure><p>Another example:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ Application.cpp -o Application -I/home/wjw/dev/Youtube/OpenGL/Dependencies/GLFW/include -L/home/wjw/dev/Youtube/OpenGL/Dependencies/GLFW/lib -lglfw</span><br></pre></td></tr></table></figure></p><p>(Where shared library is called <em>libglfw.so</em>)<br>(Note: You should also do<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:~/dev/Youtube/OpenGL/Dependencies/GLFW/lib</span><br></pre></td></tr></table></figure></p><p>)</p><h2 id="Calling-C-Shared-Library-from-Python-Code"><a href="#Calling-C-Shared-Library-from-Python-Code" class="headerlink" title="Calling C++ Shared Library from Python Code"></a>Calling C++ Shared Library from Python Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://helloacm.com</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// A function adding two integers and returning the result</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SampleAddInt</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i1 + i2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A function doing nothing ;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SampleFunction1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// insert code here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A function always returning one</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SampleFunction2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// insert code here</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile it as <strong>Shared Library</strong>:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -Wall -O3 -shared TestLib.c -o TestLib.so</span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">        TestLib = ctypes.cdll.LoadLibrary(<span class="string">'/home/wjw/misc/cpp_static_dynamic_lib/TestLib.so'</span>)</span><br><span class="line">        print(TestLib.SampleAddInt(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        main()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://helloacm.com/how-to-link-static-library-in-cc-using-gcc-compiler/" target="_blank" rel="noopener">How to Link Static Library in C/C++ using GCC Compiler</a><br><a href="https://helloacm.com/how-to-use-the-dynamic-link-library-in-c-linux-gcc-compiler/" target="_blank" rel="noopener">How to Use the Dynamic Link Library in C++ Linux (gcc compiler)</a><br><a href="https://helloacm.com/calling-c-shared-library-from-python-code-linux-version/" target="_blank" rel="noopener">Calling C++ Shared Library from Python Code (Linux Version)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Note about link library in C/C++.&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="https://wjwrobot.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wjwrobot.github.io/tags/C/"/>
    
      <category term="linker" scheme="https://wjwrobot.github.io/tags/linker/"/>
    
  </entry>
  
  <entry>
    <title>Build A Speech Assistant App with Python</title>
    <link href="https://wjwrobot.github.io/2020/01/27/Build-A-Speech-Assistant-App-with-Python/"/>
    <id>https://wjwrobot.github.io/2020/01/27/Build-A-Speech-Assistant-App-with-Python/</id>
    <published>2020-01-27T09:01:53.000Z</published>
    <updated>2020-01-27T09:09:53.809Z</updated>
    
    <content type="html"><![CDATA[<p>Using the speech recognition library and Google’s text-to-speech API to build a<br>speech recognition app.</p><a id="more"></a><p>Create a new virtual python environment within your project’s root directory and<br>activate it.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure></p><p>Install necessary library:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install speechrecognition pyaudio</span><br></pre></td></tr></table></figure></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.youtube.com/watch?v=x8xjj6cR9Nc" target="_blank" rel="noopener">Build A Python Speech Assistant App</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Using the speech recognition library and Google’s text-to-speech API to build a&lt;br&gt;speech recognition app.&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wjwrobot.github.io/categories/Python/"/>
    
    
      <category term="Speech Recognition" scheme="https://wjwrobot.github.io/tags/Speech-Recognition/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Crash Course</title>
    <link href="https://wjwrobot.github.io/2020/01/27/JavaScript-Crash-Course/"/>
    <id>https://wjwrobot.github.io/2020/01/27/JavaScript-Crash-Course/</id>
    <published>2020-01-27T02:46:27.000Z</published>
    <updated>2020-02-09T12:33:34.885Z</updated>
    
    <content type="html"><![CDATA[<p>An introduction to basic javascript syntax.</p><a id="more"></a><p>Declare variables using keywords <code>let</code>, <code>const</code> or <code>var</code> (unrecommended).<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let, const</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line">age = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">let</span> num;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'peter'</span>;</span><br></pre></td></tr></table></figure></p><p>Primary data types: Strings, Numbers, Boolean, null, undefined, Symbol<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'john'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rating = <span class="number">4.5</span>;</span><br><span class="line"><span class="keyword">const</span> iscool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> z;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> z);</span><br></pre></td></tr></table></figure></p><p>String<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Template String</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and I am <span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// Old style</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'My name is '</span> + name + <span class="string">' and I am '</span> + age);</span><br></pre></td></tr></table></figure></p><p>String manipulation<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.length);</span><br><span class="line"><span class="built_in">console</span>.log(s.toUpperCase());</span><br><span class="line"><span class="built_in">console</span>.log(s.substring(<span class="number">0</span>, <span class="number">5</span>).toLowerCase());</span><br><span class="line"><span class="built_in">console</span>.log(s.split(<span class="string">''</span>));</span><br></pre></td></tr></table></figure></p><p>Array<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">'apples'</span>, <span class="string">'oranges'</span>, <span class="string">'pears'</span>];</span><br><span class="line"><span class="comment">// notice you can't reassign const variables</span></span><br><span class="line">fruits[<span class="number">3</span>] = <span class="string">'grapes'</span>;</span><br><span class="line">fruits.push(<span class="string">'mangos'</span>);</span><br><span class="line">fruits.unshift(<span class="string">'strawberries'</span>);</span><br><span class="line">fruits.pop();</span><br><span class="line"><span class="built_in">console</span>.log(fruits);</span><br><span class="line"><span class="built_in">console</span>.log(fruits.indexOf(<span class="string">'oranges'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(fruits));</span><br></pre></td></tr></table></figure></p><p>Object literals<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object literals</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">'John'</span>,</span><br><span class="line">  lastName: <span class="string">'Snow'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  hobbies: [<span class="string">'music'</span>, <span class="string">'movies'</span>, <span class="string">'sports'</span>],</span><br><span class="line">  address: &#123;</span><br><span class="line">    street: <span class="string">'50 main st'</span>,</span><br><span class="line">    city: <span class="string">'Boston'</span>,</span><br><span class="line">    state: <span class="string">'MA'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.email = <span class="string">'john@gmail.com'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pull things out</span></span><br><span class="line"><span class="keyword">const</span> &#123; firstName, lastName, <span class="attr">address</span>: &#123; city &#125; &#125; = person;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.hobbies[<span class="number">1</span>], person.address.city);</span><br><span class="line"><span class="built_in">console</span>.log(firstName, city)</span><br></pre></td></tr></table></figure></p><p>Convert to JSON format<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    text: <span class="string">'Take out trash'</span>,</span><br><span class="line">    isCompleted: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    text: <span class="string">'Meeting with boss'</span>,</span><br><span class="line">    isCompleted: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    text: <span class="string">'Dentist appt'</span>,</span><br><span class="line">    isCompleted: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(todos[1].text);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert to JSON</span></span><br><span class="line"><span class="keyword">const</span> todoJSON = <span class="built_in">JSON</span>.stringify(todos);</span><br><span class="line"><span class="built_in">console</span>.log(todoJSON);</span><br></pre></td></tr></table></figure></p><p>Loop<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for loop</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; todos.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(todos[i].text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// simpler version</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> todo <span class="keyword">of</span> todos) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(todo.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>High order array method: forEach, map, filter<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach</span></span><br><span class="line">todos.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(todo.text);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">const</span> todoText = todos.map(<span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> todo.text;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(todoText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="keyword">const</span> todoCompleted = todos.filter(<span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> todo.isCompleted === <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(todoCompleted);</span><br><span class="line"></span><br><span class="line"><span class="comment">// combine filter and map</span></span><br><span class="line"><span class="keyword">const</span> todoCombine = todos</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> todo.isCompleted === <span class="literal">true</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> todo.text;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(todoCombine);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> color = x &gt; <span class="number">10</span> ? <span class="string">'red'</span> : <span class="string">'blue'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(color);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (color) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'color is red'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'blue'</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'color is blue'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'color is NOT red or blue'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function definition<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNums</span>(<span class="params">num1, num2 = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow function</span></span><br><span class="line"><span class="keyword">const</span> addNums2 = <span class="function">(<span class="params">num1, num2 = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(addNums2(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addNums3 = <span class="function">(<span class="params">num1 = <span class="number">1</span>, num2 = <span class="number">1</span></span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(addNums3(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addNums4 = <span class="function"><span class="params">num1</span> =&gt;</span> num1 + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(addNums4(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></p><p>Class definition<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructor function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName, dob</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  <span class="keyword">this</span>.dob = <span class="keyword">new</span> <span class="built_in">Date</span>(dob);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use prototype</span></span><br><span class="line">Person.prototype.getBirthYear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dob.getFullYear();</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class (prefered way do the same thing as above)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(firstName, lastName, dob) &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    <span class="keyword">this</span>.dob = <span class="keyword">new</span> <span class="built_in">Date</span>(dob);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getBirthYear() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dob.getFullYear();</span><br><span class="line">  &#125;</span><br><span class="line">  getFullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate object</span></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="string">'Snow'</span>, <span class="string">'4-3-1980'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.getBirthYear());</span><br><span class="line"><span class="built_in">console</span>.log(person1.getFullName());</span><br><span class="line"><span class="built_in">console</span>.log(person1);</span><br></pre></td></tr></table></figure></p><p>DOM (document object model)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Single element</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'my-form'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiple element</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.item'</span>)); <span class="comment">// recommend</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'item'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'.items'</span>);</span><br><span class="line">ul.lastElementChild.remove();</span><br><span class="line">ul.firstElementChild.textContent = <span class="string">'Hello'</span>;</span><br><span class="line">ul.children[<span class="number">1</span>].innerText = <span class="string">'Brad'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span><br><span class="line">btn.style.background = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure></p><p>Events<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'#my-form'</span>).style.background = <span class="string">'#ccc'</span>;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>).classList.add(<span class="string">'bg-dark'</span>);</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.items'</span>).lastElementChild.innerHTML =</span><br><span class="line">    <span class="string">'&lt;h1&gt;Hello&lt;/h1&gt;'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myForm = <span class="built_in">document</span>.querySelector(<span class="string">'#my-form'</span>);</span><br><span class="line"><span class="keyword">const</span> nameInput = <span class="built_in">document</span>.querySelector(<span class="string">'#name'</span>);</span><br><span class="line"><span class="keyword">const</span> emailInput = <span class="built_in">document</span>.querySelector(<span class="string">'#email'</span>);</span><br><span class="line"><span class="keyword">const</span> msg = <span class="built_in">document</span>.querySelector(<span class="string">'.msg'</span>);</span><br><span class="line"><span class="keyword">const</span> userList = <span class="built_in">document</span>.querySelector(<span class="string">'#users'</span>);</span><br><span class="line"></span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, onSubmit);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onSubmit</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">if</span> (nameInput.value === <span class="string">''</span> || emailInput.value === <span class="string">''</span>) &#123;</span><br><span class="line">    msg.classList.add(<span class="string">'error'</span>);</span><br><span class="line">    msg.innerHTML = <span class="string">'Please enter all fields'</span>;</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> msg.remove(), <span class="number">3000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    li.appendChild(</span><br><span class="line">      <span class="built_in">document</span>.createTextNode(<span class="string">`<span class="subst">$&#123;nameInput.value&#125;</span> : <span class="subst">$&#123;emailInput.value&#125;</span>`</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    userList.appendChild(li);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear fields</span></span><br><span class="line">    nameInput.value = <span class="string">''</span>;</span><br><span class="line">    emailInput.value = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.youtube.com/watch?v=hdI2bqOjy3c&amp;t=1724s" target="_blank" rel="noopener">Javascript Crash Course for Beginners</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An introduction to basic javascript syntax.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://wjwrobot.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wjwrobot.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL</title>
    <link href="https://wjwrobot.github.io/2020/01/24/OpenGL/"/>
    <id>https://wjwrobot.github.io/2020/01/24/OpenGL/</id>
    <published>2020-01-24T15:21:40.000Z</published>
    <updated>2020-01-28T07:01:19.292Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGL notes.</p><a id="more"></a><p>Build <code>glew</code> locally:</p><p>Download “.tgz” file, and extract it in the dependency directory of project.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf glew-20200115.tgz</span><br></pre></td></tr></table></figure></p><p>change build prefix in Makefile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLEW_PREFIX ?= /home/wjw/dev/Youtube/OpenGL/Dependencies/GLEW</span><br><span class="line">GLEW_DEST ?= /home/wjw/dev/Youtube/OpenGL/Dependencies/GLEW</span><br></pre></td></tr></table></figure></p><p>build with <code>make</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.youtube.com/watch?v=H2E3yO0J7TM&amp;list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2&amp;index=3" target="_blank" rel="noopener">OpenGL YouTube course</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenGL notes.&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://wjwrobot.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://wjwrobot.github.io/tags/C/"/>
    
      <category term="OpenGL" scheme="https://wjwrobot.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Series 1: Decision Trees</title>
    <link href="https://wjwrobot.github.io/2020/01/24/Machine-Learning-Series-1-Decision-Trees/"/>
    <id>https://wjwrobot.github.io/2020/01/24/Machine-Learning-Series-1-Decision-Trees/</id>
    <published>2020-01-24T12:41:37.000Z</published>
    <updated>2020-01-26T08:12:29.939Z</updated>
    
    <content type="html"><![CDATA[<p>An introduction to Decision Tree.</p><a id="more"></a><p><em>Decision Trees</em> are capable of performing <code>classification</code> and <code>regression</code> like <em>SVM</em>, and even multi-output problems.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An introduction to Decision Tree.&lt;/p&gt;
    
    </summary>
    
      <category term="MachineLearning" scheme="https://wjwrobot.github.io/categories/MachineLearning/"/>
    
    
      <category term="Machine Learning" scheme="https://wjwrobot.github.io/tags/Machine-Learning/"/>
    
      <category term="Decision Trees" scheme="https://wjwrobot.github.io/tags/Decision-Trees/"/>
    
  </entry>
  
  <entry>
    <title>Using TensorBoard with Pytorch in Colab</title>
    <link href="https://wjwrobot.github.io/2019/12/02/Using-TensorBoard-with-Pytorch-in-Colab/"/>
    <id>https://wjwrobot.github.io/2019/12/02/Using-TensorBoard-with-Pytorch-in-Colab/</id>
    <published>2019-12-02T08:53:15.000Z</published>
    <updated>2020-01-28T09:38:32.345Z</updated>
    
    <content type="html"><![CDATA[<p>PyTorch with TensorBoard.</p><a id="more"></a><h2 id="Using-Magic-commands"><a href="#Using-Magic-commands" class="headerlink" title="Using Magic commands"></a>Using Magic commands</h2><p>Put <code>%load_ext tensorboard</code> at the beginning, then if you want to use tensorboard using <code>%tensorboard --logdir=&quot;your_logdir&quot;</code></p><h3 id="references"><a href="#references" class="headerlink" title="references"></a>references</h3><p><a href="https://medium.com/looka-engineering/how-to-use-tensorboard-with-pytorch-in-google-colab-1f76a938bc34" target="_blank" rel="noopener">How to use Tensorboard with PyTorch in Google Colab</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyTorch with TensorBoard.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install and Configure Arch Linux</title>
    <link href="https://wjwrobot.github.io/2019/05/05/Install-and-Configure-Arch-Linux/"/>
    <id>https://wjwrobot.github.io/2019/05/05/Install-and-Configure-Arch-Linux/</id>
    <published>2019-05-05T11:53:04.000Z</published>
    <updated>2020-02-16T11:41:36.097Z</updated>
    
    <content type="html"><![CDATA[<p>Steps to install Arch Linux and configure it for daily use and work.</p><a id="more"></a><h2 id="Pre-installation"><a href="#Pre-installation" class="headerlink" title="Pre-installation"></a>Pre-installation</h2><h3 id="Verify-signature"><a href="#Verify-signature" class="headerlink" title="Verify signature"></a>Verify signature</h3><p>Use <strong>GnuPG</strong> to verify downloaded package.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver pgp.mit.edu --keyserver-options auto-key-retrieve --verify archlinux-&lt;version&gt;-x86_64.iso.sig</span><br></pre></td></tr></table></figure><h3 id="Build-bootable-live-environment"><a href="#Build-bootable-live-environment" class="headerlink" title="Build bootable live environment"></a>Build bootable live environment</h3><p>Plug in USB and check its device name by</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>Asume its name is <strong>/dev/sdb</strong>, then use <strong>dd</strong> to build the bootable system to usb (<strong>warning</strong> before press “ENTER”, double check the command to prevent from destroying system)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/way/to/arch/file of=/dev/sdb</span><br></pre></td></tr></table></figure><h3 id="Verify-the-boot-mode"><a href="#Verify-the-boot-mode" class="headerlink" title="Verify  the boot mode"></a>Verify  the boot mode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><p>If the directory does not exist, the system may be booted in <strong>BIOS</strong> or <strong>CSM</strong> mode, otherwise, in <strong>UEFI</strong> mode. If it’s in <strong>UEFI</strong> mode, go ahead.</p><p>Plug in USB, shut down computer, enter into BIOS system interface with holding <strong>F2</strong> then press power button. (Different motherboards diverse in entering BIOS)</p><p>If you can’t see a boot option “boot from USB”, go to create a boot option by select your boot file which end with <strong>.efi</strong>. And then put this option to number 1 boot option. OK, save change and reboot system.</p><hr><p>Now we had entered the Arch live system.</p><h3 id="Connect-to-the-Internet"><a href="#Connect-to-the-Internet" class="headerlink" title="Connect to the Internet"></a>Connect to the Internet</h3><p>The installation image enables the <strong>dhcpcd</strong> daemon for wired network devices on boot. The connection can be verified with <strong>ping</strong>, If you use wifi, you should configure wifi with <strong>wifi-menu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi-menu</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 3 baidu.com</span><br></pre></td></tr></table></figure><h3 id="Update-the-system-clock"><a href="#Update-the-system-clock" class="headerlink" title="Update the system clock"></a>Update the system clock</h3><p>Use <strong>timedatectl</strong> to ensure the system clock is accurate</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>(To check the service status, use )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><h3 id="Partition-the-disks"><a href="#Partition-the-disks" class="headerlink" title="Partition the disks"></a>Partition the disks</h3><p>When recognized by the live system,disks are assigned to a <strong>block device</strong>. To  identify these devices, use <strong>lsblk</strong> or <strong>fdisk -l</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>The following <em>partitions</em> are required for a chosen device:</p><ul><li><p>One partition for the root directory <strong>/</strong> .</p></li><li><p>If <strong>UEFI</strong> is enabled, an  <strong>EFI system partition</strong> .</p><p>  (The following are alternative)</p></li><li><p><strong>Swap</strong> space can be set on a separate partition or a <strong>swap file</strong> .</p></li><li><p><strong>/home</strong> directory for users .</p></li></ul><p>(<em>Note</em> : If you want to create any stacked block devices for <strong>LVM</strong>, <strong>disk encryption</strong>, or <strong>RAID</strong>, do it now.)</p><p>To modify <strong>partition tables</strong>, use <strong>cfdisk</strong>, <strong>fdisk</strong> or <strong>parted</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/sda</span><br></pre></td></tr></table></figure><p>my partition plan for system with 4G RAM and 500G storage device</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1 200M/boot/efi  EFI System</span><br><span class="line">/dev/sda2 250G    /    Linux fs</span><br><span class="line">/dev/sda3 remaining  /home    Linux fs</span><br></pre></td></tr></table></figure><h3 id="Format-the-partitions"><a href="#Format-the-partitions" class="headerlink" title="Format the partitions"></a>Format the partitions</h3><p>Once the partitions have been created, each must be formatted with an appropriate <strong>file system</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1</span><br><span class="line"></span><br><span class="line">mkfs.ext4 /dev/sda2</span><br><span class="line">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure><h3 id="Mount-the-file-systems"><a href="#Mount-the-file-systems" class="headerlink" title="Mount the file systems"></a>Mount the file systems</h3><p>Mount the file system on the root partition to <strong>/mnt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda2 /mnt</span><br></pre></td></tr></table></figure><p>Create mount points for any remaining partitions and mount them accordingly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/boot/efi</span><br><span class="line">mount /dev/sda1 /mnt/boot/efi</span><br><span class="line"></span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sda3 /mnt/home</span><br></pre></td></tr></table></figure><p><strong>genfstab</strong> will later detect mounted file systems and swap space.</p><hr><p>We have accomplished the work for Pre-Installation, now enter the process of Installation.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Select-the-mirrors"><a href="#Select-the-mirrors" class="headerlink" title="Select the mirrors"></a>Select the mirrors</h3><p>Packages to be installed must be downloaded from mirror servers, which are defined in <strong>/etc/pacman.d/mirrorlist</strong> . Use <strong>vim</strong> to select your country’s mirror to the top.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><h3 id="Install-the-base-packages"><a href="#Install-the-base-packages" class="headerlink" title="Install the base packages"></a>Install the base packages</h3><p>Use the <strong>pacstrap</strong> script to install the <strong>base</strong> and <strong>base-devel</strong> package groups:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel</span><br></pre></td></tr></table></figure><hr><h2 id="Configure-the-system"><a href="#Configure-the-system" class="headerlink" title="Configure the system"></a>Configure the system</h2><h3 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h3><p>Generate an <strong>fstab</strong> file (use <strong>-U</strong> or <strong>-L</strong> to define by <em>UUID</em> or <em>labels</em>, respectively)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>and check the resulting file.</p><h3 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h3><p>Change root into the new system:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h3 id="Configure-wifi"><a href="#Configure-wifi" class="headerlink" title="Configure wifi"></a>Configure wifi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S dialog wpa_suppliant</span><br><span class="line">wifi-menu</span><br></pre></td></tr></table></figure><h3 id="Time-zone"><a href="#Time-zone" class="headerlink" title="Time zone"></a>Time zone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asian/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>Generate <strong>/etc/adjtime</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><p>This command assumes the hardware clock is set to <strong>UTC</strong>.</p><h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><p>Uncomment <strong>en_US.UTF-8 UTF-8</strong> and other needed <strong>locales</strong> in <strong>/etc/locale.gen</strong>,and generate them</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><p>Set the <strong>LANG</strong> variable in <strong>/etc/locale.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="Network-configuration"><a href="#Network-configuration" class="headerlink" title="Network configuration"></a>Network configuration</h3><p>Create the hostname file <strong>/etc/hostname</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'Arch'</span> &gt; /etc/hostname</span><br></pre></td></tr></table></figure><p>​Add matching entries to <strong>/etc/hosts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\tArch.localdomain\tArch"</span> &gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>If the system has a permament IP address, it should be used instead of <strong>127.0.1.1</strong> .</p><h3 id="Initramfs"><a href="#Initramfs" class="headerlink" title="Initramfs"></a>Initramfs</h3><p>Creating a new <strong>initramfs</strong> is usually not required, because <strong>mkinitcpio</strong> was run on installation of the <strong>linux</strong> package with <strong>pacstrap</strong> .</p><p>For special configurations, modify the <strong>mkinitcpio.conf</strong> file and recreate the initramfs image :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -p linux</span><br></pre></td></tr></table></figure><h3 id="Set-root-password"><a href="#Set-root-password" class="headerlink" title="Set root password"></a>Set root password</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="Install-bootloader"><a href="#Install-bootloader" class="headerlink" title="Install bootloader"></a>Install bootloader</h3><p>A Linux-capable boot loader must be installed in order to boot Arch Linux. If you have an Intel or AMD CPU, enable <strong>microcode</strong> updates. Let’s install GRUB boot loader:</p><h4 id="Download-grub-and-efibootmgr"><a href="#Download-grub-and-efibootmgr" class="headerlink" title="Download grub and efibootmgr"></a>Download grub and efibootmgr</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br></pre></td></tr></table></figure><p><strong>GRUB</strong> is the bootloader while <strong>efibootmgr</strong> is used by the GRUB installation script to write boot entries to <strong>NVRAM</strong> .</p><p>(Mount the EFI system partition at mount point, for example, <strong><em>/boot/efi</em></strong> )</p><h4 id="Install-the-GRUB-EFI-application"><a href="#Install-the-GRUB-EFI-application" class="headerlink" title="Install the GRUB EFI application"></a>Install the GRUB EFI application</h4><p>Install the GRUB EFI application <strong>grubx64.efi</strong> to <strong>/boot/efi*/EFI/GRUB/</strong> and install its modules to <strong>/boot/grub/x86_64-efi/</strong> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB</span><br></pre></td></tr></table></figure><p>(After the above install completed the main GRUB directory is located at <strong>/boot/grub/</strong> . Note that <strong>grub-install</strong> also tries to create an entry tin the fireware boot manager, named <strong>GRUB</strong> in the above example.)</p><h4 id="Generated-grub-cfg"><a href="#Generated-grub-cfg" class="headerlink" title="Generated grub.cfg"></a>Generated grub.cfg</h4><p>Use the <strong>grub-mkconfig</strong> tool to generate <strong>/boot/grub/grub.cfg</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>(<em>Note</em>:</p><ul><li>Remember that <strong>/boot/grub/grub.cfg</strong> has to be re-generated after any change to <strong>/etc/default/grub</strong> or files in <strong>/etc/grub.d</strong> .</li><li>After installing or removing a <strong>kernel</strong>, you just need to re-run the above <strong>grub-mkconfig</strong> command.)</li></ul><h3 id="Reboot"><a href="#Reboot" class="headerlink" title="Reboot"></a>Reboot</h3><p>Exit the chroot environment, then manually unmount all the partitions.Finally, restart the machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><hr><h2 id="Post-installation"><a href="#Post-installation" class="headerlink" title="Post-installation"></a>Post-installation</h2><h3 id="Add-a-new-user"><a href="#Add-a-new-user" class="headerlink" title="Add a new user"></a>Add a new user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash wjw</span><br><span class="line">passwd wjw</span><br></pre></td></tr></table></figure><p>To grant sudo access to user <em>wjw</em> run <strong>visudo</strong> and add “<strong>wjw ALL=(ALL) ALL</strong>“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3><p>See available fonts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fc</span>-list</span><br></pre></td></tr></table></figure><p>Download fonts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wqy-microhei ttf-dejavu</span><br><span class="line">yay -S ttf-symbola</span><br></pre></td></tr></table></figure><p>or download packages manually and put font files to the <strong>.local/share/fonts/</strong> directory.</p><p>If you want to change console font, put font files in the <strong>/usr/share/kbd/consolefonts</strong> directory. Then go to see the console fonts, and select one..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/share/kbd/consolefonts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"FONT=sun12x22\nFONT_MAP=8859-2"</span> &gt; /etc/vconsole.conf</span><br></pre></td></tr></table></figure><h3 id="Graphical-user-interface"><a href="#Graphical-user-interface" class="headerlink" title="Graphical user interface"></a>Graphical user interface</h3><h3 id="Install-Xorg"><a href="#Install-Xorg" class="headerlink" title="Install Xorg"></a>Install Xorg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-server xorg-xinit xorg-xinput</span><br></pre></td></tr></table></figure><p>configure <strong>~/.xinitrc</strong> file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -f ~/.Xresources ]] &amp;&amp; xrdb -merge -I<span class="variable">$HOME</span> ~/.Xresources</span><br></pre></td></tr></table></figure><h3 id="Install-i3-gaps-and-related-programs"><a href="#Install-i3-gaps-and-related-programs" class="headerlink" title="Install  i3-gaps  and related programs"></a>Install  i3-gaps  and related programs</h3><p>Install i3-gaps and configure to start from <strong>~/.xinitrc</strong> . (<strong>rofi</strong> for replacing d-menu, <strong>feh</strong> for setting wallpaper, <strong>light</strong> for brightness control, <strong>scrot</strong> for screenshot, <strong>i3blocks</strong> for replacing i3status, <strong>acpi</strong> for i3blocks’s battery module)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S i3-gaps i3blocks rofi feh light scrot acpi</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'exec i3'</span> &gt; ~/.xinitrc</span><br></pre></td></tr></table></figure><p>You can start up i3 manually by typing command <strong>startx</strong> or set it to automatically.If you use <strong>zsh</strong> ,put the following into the <strong>~/.zprofile</strong> to auto start X at login</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ ! <span class="variable">$DISPLAY</span> &amp;&amp; <span class="variable">$XDG_VTNR</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exec</span> startx</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="Install-ssr"><a href="#Install-ssr" class="headerlink" title="Install ssr"></a>Install ssr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git wget python</span><br><span class="line">wget http://www.djangoz.com/ssr</span><br><span class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 744 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure><h3 id="Wireless-configure"><a href="#Wireless-configure" class="headerlink" title="Wireless configure"></a>Wireless configure</h3><p>Install <strong>dialog</strong> and <strong>wpa_suppliant</strong> for using <strong>wifi-menu</strong> . (or optionally Install <strong>networkmanager</strong> )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dialog wpa_suppliant</span><br></pre></td></tr></table></figure><p>Enabling wifi auto connecting when boot. (use <strong>netctl</strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wifi-menu -o</span><br></pre></td></tr></table></figure><p>use command above to generate the profile in <strong>/etc/netctl</strong> for use of <strong>netctl</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netctl <span class="built_in">enable</span> your_profile</span><br></pre></td></tr></table></figure><h3 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h3><p>If no sound because of Master set to <strong>HDMI</strong>, go to change it to <strong>PCM</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> -e <span class="string">"defaults.pcm.card 1\ndefaults.pcm.device 0\ndefaults.ctl.card 1"</span> &gt; /etc/asound.conf</span><br></pre></td></tr></table></figure><p>Download <strong>pulseaudio</strong> and related control command utils.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S pulseaudio pulsemixer playerctl</span><br></pre></td></tr></table></figure><p>And download <strong>alsa-utils</strong> for controling alsa<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils</span><br></pre></td></tr></table></figure></p><h3 id="Useful-program"><a href="#Useful-program" class="headerlink" title="Useful program"></a>Useful program</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S firefox neofetch</span><br></pre></td></tr></table></figure><h3 id="yay"><a href="#yay" class="headerlink" title="yay"></a>yay</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="lxappearance-amp-qt5ct"><a href="#lxappearance-amp-qt5ct" class="headerlink" title="lxappearance &amp; qt5ct"></a>lxappearance &amp; qt5ct</h3><p>qt5ct for qt5 based programs, while lxappearance for gtk based programs.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S lxappearance qt5ct</span><br></pre></td></tr></table></figure><p>gtk related configure files:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/.gtkrc-2.0</span><br><span class="line">~/.config/gtk-3.0/settings.ini</span><br></pre></td></tr></table></figure><p>GTK Theme<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S adapta-gtk-theme</span><br></pre></td></tr></table></figure></p><p>Icon theme<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/horst3180/arc-icon-theme --depth 1 &amp;&amp; <span class="built_in">cd</span> arc-icon-theme</span><br><span class="line">./autogen.sh --prefix=/usr</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>add the following environment variable to <strong>~/.pam_environment</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT_QPA_PLATFORMTHEME=qt5ct</span><br></pre></td></tr></table></figure><h3 id="laptop-power-saving"><a href="#laptop-power-saving" class="headerlink" title="laptop power saving"></a>laptop power saving</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S tlp</span><br></pre></td></tr></table></figure><p>then configure it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> tlp.service tlp-sleep.service</span><br><span class="line">systemctl mask systemd-rfkill.service systemd-rfkill.socket</span><br></pre></td></tr></table></figure><p>(<em>Note</em>: <strong>tlp.service</strong> starts <strong>NetworkManager.service</strong> if it is available. If you use a different network manager, mask <strong>NetworkManager.service</strong> or edit <strong>tlp.service</strong> and remove the service out of line <strong>Wants=</strong>)</p><h3 id="System-proxy-Privoxy"><a href="#System-proxy-Privoxy" class="headerlink" title="System proxy (Privoxy)"></a>System proxy (Privoxy)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman  -S privoxy</span><br></pre></td></tr></table></figure><p>then edit <strong>/etc/privoxy/config</strong> file and add the following line the 5.2 section (note the <strong>.</strong> at the end)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br></pre></td></tr></table></figure><p>It means that transact all http requests to socks5 and redirect to localhost’s 1080 port (change this value to your ssr listening port)</p><p>then you should go to start and enable <strong>privoxy.service</strong> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start privoxy.service</span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy.service</span><br></pre></td></tr></table></figure><p>Privoxy’s default listening port is 8118, so your should set your http proxy address to <strong>127.0.0.1:8118</strong> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8118"</span></span><br></pre></td></tr></table></figure><p>Configure git proxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:8118</span><br></pre></td></tr></table></figure><h3 id="File-manager"><a href="#File-manager" class="headerlink" title="File manager"></a>File manager</h3><p>ranger (use w3m to preview image) and pcmanfm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ranger highlight w3m</span><br><span class="line">sudo pacman -S pcmanfm</span><br></pre></td></tr></table></figure></p><h3 id="tmux-amp-tmux-resurrect"><a href="#tmux-amp-tmux-resurrect" class="headerlink" title="tmux &amp; tmux-resurrect"></a>tmux &amp; tmux-resurrect</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S tmux</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</span><br></pre></td></tr></table></figure><h3 id="Build-package"><a href="#Build-package" class="headerlink" title="Build package"></a>Build package</h3><p>use <strong>asp</strong> or <strong>pbget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S asp</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Download docker, then create a group named docker and add user to this group for using docker without “sudo” command for regular user.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S docker</span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>Then enable and start docker.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><p>Setting proxy for docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/systemd/system/docker.service.d</span><br><span class="line">touch /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><p>put following content to the file above</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=192.168.1.1:8118&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=192.168.1.1:8118&quot;</span><br></pre></td></tr></table></figure><p>Then reload units</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>Check whether setting successfully</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl show docker --property Environment</span><br></pre></td></tr></table></figure><h3 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h3><p>Download <strong>nvidia-docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S nvidia-docker</span><br></pre></td></tr></table></figure><p>Pull latest <strong>tensorflow-gpu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow:latest-gpu-py3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --runtime=nvidia -it tensorflow/tensorflow:latest-gpu-py3 bash</span><br></pre></td></tr></table></figure><p>(<strong>Note:</strong> <code>nvidia-docker</code> v1 uses the <code>nvidia-docker</code> alias, where v2 uses <code>docker --runtime=nvidia</code>.)</p><p>Docker Usage</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a<span class="comment">#check all containers</span></span><br><span class="line">docker rm $(docker ps -aq) <span class="comment">#delete all containers</span></span><br><span class="line"></span><br><span class="line">docker images<span class="comment">#check all images</span></span><br><span class="line">docker rmi $(docker images -q) <span class="comment">#delete all images</span></span><br><span class="line">docker rmi node_name<span class="comment">#delete node(image)</span></span><br><span class="line"></span><br><span class="line">docker info</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a container named tf and run it</span></span><br><span class="line"><span class="comment"># -it : interactive</span></span><br><span class="line"><span class="comment"># --name : assign the name "tf" to this container</span></span><br><span class="line"><span class="comment"># -p : mapping ports of container to host, first pair for Jupyter notebook, the second one for Tensorboard</span></span><br><span class="line"><span class="comment"># -v host_folder:container_folder : enables sharing a folder between the host and the container. The host folder should be inside your home directory. This folder is seen as notebooks directory in the container which is used by Ipython/Jupyter Notebook.</span></span><br><span class="line">docker run -it -p 8888:8888 -p 6006:6006 -v $(<span class="built_in">pwd</span>)/tensorflow:/notebooks --name tf tensorflow/tensorflow</span><br><span class="line"></span><br><span class="line">docker start -i tf<span class="comment">#start container named tf with interactive mode</span></span><br></pre></td></tr></table></figure><h3 id="Anaconda-and-Pytorch"><a href="#Anaconda-and-Pytorch" class="headerlink" title="Anaconda and Pytorch"></a>Anaconda and Pytorch</h3><p>Installing anaconda3 firstly, then create an environment named “pytorch” for pytorch compatible with cuda 10, lastly, enter this environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.continuum.io/archive/Anaconda3-2018.12-Linux-x86_64.sh</span><br><span class="line">./Anaconda3-2018.12-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">conda create -n pytorch pytorch torchvision cuda100 -c pytorch</span><br><span class="line"><span class="built_in">source</span> activate pytorch</span><br></pre></td></tr></table></figure><p>Install packages in the <code>pytorch</code> environment we created before.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source /opt/anaconda/bin/activate pytorch</span><br><span class="line">conda install opencv</span><br><span class="line">conda install -c conda-forge opencv=4.2 (or this)</span><br><span class="line">conda install scikit-learn</span><br><span class="line">conda install -c conda-forge matplotlib</span><br></pre></td></tr></table></figure></p><p>or use <strong>pip</strong> package manager to install pytorch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 --no-cache-dir install torch</span><br><span class="line">$ pip3 --no-cache-dir install torchvision</span><br></pre></td></tr></table></figure><h3 id="xclip"><a href="#xclip" class="headerlink" title="xclip"></a>xclip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xclip</span><br></pre></td></tr></table></figure><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>Add ssh key :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"youremail@gmail.com"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># change your origin remote to ssh url from https url</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:&lt;Username&gt;/&lt;Project&gt;.git</span><br></pre></td></tr></table></figure><p>Go to github add a new key, then paste the content of the clipboard to it.</p><p>(If count problem “ssh: connect to host github.com port 22: Connection refused”, go to create a config file for ssh)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>Put the content above to the file <code>~/.ssh/config</code>.</p><h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><p>mpd + ncmpcpp + cantata + mps-youtube + youtube-dl + mpv</p><h3 id="Fuzzy-Finder"><a href="#Fuzzy-Finder" class="headerlink" title="Fuzzy Finder"></a>Fuzzy Finder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fzf</span><br></pre></td></tr></table></figure><h3 id="Text-Editor"><a href="#Text-Editor" class="headerlink" title="Text Editor"></a>Text Editor</h3><h4 id="Vim-amp-Neovim-amp-as-IDE"><a href="#Vim-amp-Neovim-amp-as-IDE" class="headerlink" title="Vim &amp; Neovim &amp; as IDE"></a>Vim &amp; Neovim &amp; as IDE</h4><p>vim plugin manager: vim-plug<br>code-searching tool: the_silver_searcher (<strong>ag</strong>)<br>Plugins for making a IDE: coc.vim and its extensions (coc-python, coc-snippets, coc-vimtex)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S vim neovim</span><br><span class="line">sudo pacman -S the_silver_searcher</span><br><span class="line">curl -fLo ~/.vim/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line">sudo pacman -S pip3</span><br><span class="line">sudo pip3 install python-language-server</span><br><span class="line">yay -S ccls-git</span><br><span class="line">pip3 install --user --upgrade pynvim</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ctags</span><br></pre></td></tr></table></figure><p>chemacs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/plexus/chemacs.git</span><br><span class="line"><span class="built_in">cd</span> chemacs</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>Use Doom-Emacs with chemacs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.emacs-profiles.el</span><br><span class="line">mkdir -p ~/Git/doom</span><br></pre></td></tr></table></figure></p><p>put the content below to <em>~/.emacs-profiles.el</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((&quot;default&quot; . ((user-emacs-directory . &quot;~/.emacs.d&quot;)))</span><br><span class="line"> (&quot;doom&quot; . ((user-emacs-directory . &quot;~/Git/doom&quot;)</span><br><span class="line">            (env . ((&quot;DOOMDIR&quot; . &quot;~/.doom.d&quot;))))))</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b develop https://github.com/hlissner/doom-emacs ~/Git/doom</span><br><span class="line">~/Git/doom/bin/doom -p ~/.doom.d quickstart</span><br><span class="line">make install</span><br><span class="line">emacs --with-profile doom &amp;</span><br></pre></td></tr></table></figure><p>Use Spacemacs with chemacs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/Git/spacemacs</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/syl20bnr/spacemacs.git ~/Git/spacemacs</span><br></pre></td></tr></table></figure></p><p>Doom-Emacs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b develop https://github.com/hlissner/doom-emacs ~/.emacs.d</span><br><span class="line">~/.emacs.d/bin/doom quickstart</span><br><span class="line"><span class="built_in">cd</span> .emacs.d</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>Emacs<br>Configure lsp-mode and pyls-ms (Microsoft Python Language Server)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dotnet-sdk</span><br><span class="line">mkdir ~/build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Microsoft/python-language-server.git</span><br><span class="line"><span class="built_in">cd</span> python-language-server/src/LanguageServer/Impl</span><br><span class="line">dotnet build -c Release</span><br></pre></td></tr></table></figure></p><h3 id="Book-Reader"><a href="#Book-Reader" class="headerlink" title="Book Reader"></a>Book Reader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zathura zathura-pdf-poppler zathura-pdf-mupdf</span><br><span class="line">sudo pacman -S calibre</span><br></pre></td></tr></table></figure><h3 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S texlive-most</span><br></pre></td></tr></table></figure><h3 id="Sync-tool"><a href="#Sync-tool" class="headerlink" title="Sync tool"></a>Sync tool</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S syncthing</span><br></pre></td></tr></table></figure><h3 id="Input-Method"><a href="#Input-Method" class="headerlink" title="Input Method"></a>Input Method</h3><p>fcitx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-im fcitx-configtool fcitx-mozc fcitx-sunpinyin</span><br></pre></td></tr></table></figure></p><p>then add input method using <em>fcitx-configtool</em>.</p><p>(<em>OR</em> ibus<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ibus ibus-rime ibus-anthy</span><br></pre></td></tr></table></figure></p><p>Change the default chinese input method to simplified, within the file <em>~/.config/ibus/rime/build/luna_pinyin.schema.yaml</em> put <em>reset: 1</em> underneath the <em>name: simplification</em>.<br>)</p><h3 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h3><p>In auto switch profile, in Rule list confifug, select AutoProxy, and put the following content into Rule list url.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</span><br></pre></td></tr></table></figure></p><h3 id="Mount-usb"><a href="#Mount-usb" class="headerlink" title="Mount usb"></a>Mount usb</h3><p>See the usb’s device name<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure></p><p>said, <em>/dev/sdb</em>, then go to make a mount point, and mount it<br>for example<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /mnt/media/usb</span><br><span class="line">mount /dev/sdb1 /mnt/media/usb</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sdb1</span><br></pre></td></tr></table></figure><h3 id="Cron"><a href="#Cron" class="headerlink" title="Cron"></a>Cron</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cronie</span><br></pre></td></tr></table></figure><h3 id="Draw-figures"><a href="#Draw-figures" class="headerlink" title="Draw figures"></a>Draw figures</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S inkscape</span><br></pre></td></tr></table></figure><h3 id="Color-Schedule"><a href="#Color-Schedule" class="headerlink" title="Color Schedule"></a>Color Schedule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S python-pywal</span><br></pre></td></tr></table></figure><h3 id="X-hotkey-daemon"><a href="#X-hotkey-daemon" class="headerlink" title="X hotkey daemon"></a>X hotkey daemon</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sxhkd</span><br></pre></td></tr></table></figure><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dmenu</span><br></pre></td></tr></table></figure><h3 id="Notification"><a href="#Notification" class="headerlink" title="Notification"></a>Notification</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dunst</span><br></pre></td></tr></table></figure><h3 id="Enable-to-connect-to-android"><a href="#Enable-to-connect-to-android" class="headerlink" title="Enable to connect to android"></a>Enable to connect to android</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mtpfs gvfs-mtp gvfs-gphoto2</span><br></pre></td></tr></table></figure><h3 id="Package-Manager"><a href="#Package-Manager" class="headerlink" title="Package Manager"></a>Package Manager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yarn</span><br></pre></td></tr></table></figure><h3 id="Compositor-with-blur"><a href="#Compositor-with-blur" class="headerlink" title="Compositor with blur"></a>Compositor with blur</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tryone144/compton.git</span><br><span class="line">sudo pacman -S libconfig asciidoc</span><br><span class="line">make</span><br><span class="line">make docs</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="Compositor"><a href="#Compositor" class="headerlink" title="Compositor"></a>Compositor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S compton</span><br></pre></td></tr></table></figure><h3 id="Swap-Caps-and-Esc-key"><a href="#Swap-Caps-and-Esc-key" class="headerlink" title="Swap Caps and Esc key"></a>Swap Caps and Esc key</h3><p>For console:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /usr/<span class="built_in">local</span>/share/kbd/keymaps</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"keycode 1 = Caps_Lock\nkeycode 58 = Escape"</span> &gt; /usr/<span class="built_in">local</span>/share/kbd/keymaps/personal.map</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"KEYMAP=/usr/local/share/kbd/keymaps/personal.map"</span> &gt;&gt; /etc/vconsole.conf</span><br></pre></td></tr></table></figure></p><p>For X:<br>add a new file named .Xmodmap (for details see my dot files), then<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmodmap ~/.Xmodmap</span><br></pre></td></tr></table></figure></p><p>(note: if you want to attach an external keyboard, you also need to execute the<br>above command)</p><h3 id="Touchpad"><a href="#Touchpad" class="headerlink" title="Touchpad"></a>Touchpad</h3><h4 id="Permanent-change"><a href="#Permanent-change" class="headerlink" title="Permanent change"></a>Permanent change</h4><p>Put following content to file <code>/etc/X11/xorg.conf.d/40-touchpad.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;InputClass&quot;</span><br><span class="line">        Identifier &quot;libinput touchpad catchall&quot;</span><br><span class="line">        MatchIsTouchpad &quot;on&quot;</span><br><span class="line">        Driver &quot;libinput&quot;</span><br><span class="line">        Option &quot;Tapping&quot; &quot;on&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure></p><h4 id="Runtime-change"><a href="#Runtime-change" class="headerlink" title="Runtime change"></a>Runtime change</h4><p>replace the following command with appropriate values.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-xinput</span><br><span class="line">xinput</span><br><span class="line">xinput --list-props your_device_id</span><br><span class="line">xinput <span class="built_in">set</span>-prop your_device_id <span class="string">"want_to_change_prop"</span> changed_number</span><br></pre></td></tr></table></figure></p><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><h4 id="networkmanager"><a href="#networkmanager" class="headerlink" title="networkmanager"></a>networkmanager</h4><p>Install networkmanager<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S networkmanager</span><br><span class="line">nmcli device wifi list</span><br><span class="line">nmcli device wifi connect your_wifi_SSID password your_password</span><br></pre></td></tr></table></figure></p><h4 id="netctl"><a href="#netctl" class="headerlink" title="netctl"></a>netctl</h4><ul><li><p>wireless</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dialog wpa_suppliant</span><br></pre></td></tr></table></figure></li><li><p>wired</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ifplugd</span><br></pre></td></tr></table></figure></li></ul><p>Find your ethernet interface using <code>ip link</code> command, and<br>start/enable the <a href="mailto:`netctl-ifplugd@interface.service" target="_blank" rel="noopener">`netctl-ifplugd@interface.service</a>` systemd unit. (note: change the above <em>interface</em> with your ethernet interface)</p><h3 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S goldendict</span><br></pre></td></tr></table></figure><h3 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S android-tools</span><br></pre></td></tr></table></figure><h3 id="Nvidia-Driver"><a href="#Nvidia-Driver" class="headerlink" title="Nvidia Driver"></a>Nvidia Driver</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nvidia nvidia-utils bbswitch</span><br><span class="line">yay -S nvidia-xrun</span><br></pre></td></tr></table></figure><p>and go to configure .nvidia-xinitrc</p><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S virtualbox</span><br><span class="line">systemctl start systemd-modules-load.service</span><br><span class="line">sudo modprobe vboxdrv</span><br><span class="line">yay -S virtualbox-ext-oracle</span><br></pre></td></tr></table></figure><p>(note: while installing select <em>virtualbox-host-modules-arch</em>)</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>GNU Debugger:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gdb</span><br></pre></td></tr></table></figure></p><p>Memory Debugging:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S valgrind</span><br></pre></td></tr></table></figure></p><p>Snap:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yay -S snapd</span><br><span class="line">systemctl start snapd.socket</span><br></pre></td></tr></table></figure></p><p>Godot game engine<br>Scons build tool:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S scons</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S godot-git</span><br></pre></td></tr></table></figure><p>Vulkan-Intel Driver<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S vulkan-intel</span><br></pre></td></tr></table></figure></p><p>Sticky notes:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S qtpad</span><br></pre></td></tr></table></figure></p><p>Image Viewer<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sxiv</span><br></pre></td></tr></table></figure></p><p>Weather<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl wttr.in</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ntfs-3g</span><br></pre></td></tr></table></figure><h3 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bluez bluez-utils</span><br><span class="line">systemctl start bluetooth.service</span><br><span class="line">bluetoothctl</span><br></pre></td></tr></table></figure><h3 id="MySQL-MariaDB"><a href="#MySQL-MariaDB" class="headerlink" title="MySQL/MariaDB"></a>MySQL/MariaDB</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mariadb</span><br><span class="line">sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">sudo pip install mysql-connector</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>after enter into MariaDB, assign a password for root user, so you can enter MariaDB without ‘sudo’:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;your_password&apos;</span><br></pre></td></tr></table></figure><h3 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S tldr</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Installation guide</a></li><li><a href="https://stackoverflow.com/questions/33636925/how-do-i-start-tensorflow-docker-jupyter-notebook#" target="_blank" rel="noopener">How do I start tensorflow docker jupyter notebook</a></li><li><a href="https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/" target="_blank" rel="noopener">Configure Emacs, lsp-mode and pyls-ms</a></li><li><a href="https://castel.dev/post/lecture-notes-2/" target="_blank" rel="noopener">How I draw figures for my mathematical lecture notes using Inkscape</a></li><li><a href="https://github.com/wjwrobot/dot_files" target="_blank" rel="noopener">Dot files</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Steps to install Arch Linux and configure it for daily use and work.&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://wjwrobot.github.io/categories/Linux/"/>
    
    
      <category term="Arch Linux" scheme="https://wjwrobot.github.io/tags/Arch-Linux/"/>
    
      <category term="Linux" scheme="https://wjwrobot.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Enable Colaboratory to Use Local Runtime</title>
    <link href="https://wjwrobot.github.io/2019/01/23/Enable-Colaboratory-use-local-runtime/"/>
    <id>https://wjwrobot.github.io/2019/01/23/Enable-Colaboratory-use-local-runtime/</id>
    <published>2019-01-23T08:44:25.000Z</published>
    <updated>2019-01-23T09:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Enable Google Colaboratory to use local runtime through Jupyter Notebook.</p><a id="more"></a><h3 id="Install-Jupyter-Notebook"><a href="#Install-Jupyter-Notebook" class="headerlink" title="Install Jupyter Notebook"></a>Install Jupyter Notebook</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S jupyter-notebook</span><br></pre></td></tr></table></figure><p>Enable interactive Javascript widgets in the notebooks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo jupyter nbextension <span class="built_in">enable</span> --py --sys-prefix widgetsnbextension</span><br></pre></td></tr></table></figure><h3 id="Install-and-enable-the-jupyter-http-over-ws-jupyter-extension"><a href="#Install-and-enable-the-jupyter-http-over-ws-jupyter-extension" class="headerlink" title="Install and enable the jupyter_http_over_ws jupyter extension"></a>Install and enable the <code>jupyter_http_over_ws</code> jupyter extension</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install jupyter_http_over_ws</span><br><span class="line">$ jupyter serverextension <span class="built_in">enable</span> --py jupyter_http_over_ws</span><br></pre></td></tr></table></figure><h3 id="Start-server-and-authenticate"><a href="#Start-server-and-authenticate" class="headerlink" title="Start server and authenticate"></a>Start server and authenticate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook \</span><br><span class="line">  --NotebookApp.allow_origin=<span class="string">'https://colab.research.google.com'</span> \</span><br><span class="line">  --port=8888 \</span><br><span class="line">  --NotebookApp.port_retries=0</span><br></pre></td></tr></table></figure><h3 id="Connect-to-the-local-runtime"><a href="#Connect-to-the-local-runtime" class="headerlink" title="Connect to the local runtime"></a>Connect to the local runtime</h3><p>In Colaboratory, click the “Connect” button and select “Connect to local runtime…”</p><p><em>Note:</em></p><p>If you use firefox, you must set the <code>network.websocket.allowInsecureFromHTTPS</code> to be true.</p><p>In the address bar, type <strong>about:config</strong> and press Enter, then type <code>network.websocket.allowInsecureFromHTTPS</code> and set its value to be true.</p><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><ul><li><p><a href="https://wiki.archlinux.org/index.php/Jupyter" target="_blank" rel="noopener">Install Jupyter</a></p></li><li><p><a href="https://research.google.com/colaboratory/local-runtimes.html" target="_blank" rel="noopener">Colaboratory local runtime</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Enable Google Colaboratory to use local runtime through Jupyter Notebook.&lt;/p&gt;
    
    </summary>
    
      <category term="Software" scheme="https://wjwrobot.github.io/categories/Software/"/>
    
    
      <category term="Colaboratory" scheme="https://wjwrobot.github.io/tags/Colaboratory/"/>
    
      <category term="Jupyter Notebook" scheme="https://wjwrobot.github.io/tags/Jupyter-Notebook/"/>
    
  </entry>
  
  <entry>
    <title>Building Personal Website with Github</title>
    <link href="https://wjwrobot.github.io/2019/01/20/build_site_with_github/"/>
    <id>https://wjwrobot.github.io/2019/01/20/build_site_with_github/</id>
    <published>2019-01-19T16:00:00.000Z</published>
    <updated>2019-05-05T13:06:29.480Z</updated>
    
    <content type="html"><![CDATA[<p>A tutorial for building your own website make use of github and hexo, with a beautiful theme “material-x”.</p><a id="more"></a><h2 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h2><p>​    You should alread install <strong>git</strong> and <strong>nodejs</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​    Hexo create a directory for your project:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>​    Hexo will build a skeleton for your site:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>​    Test whether everything is ok:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>​    If it works well. you can change the theme, which can be found on <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo</a> site. I will use <code>material-x</code>  <a href="https://xaoxuu.com/wiki/material-x/index.html" target="_blank" rel="noopener">theme</a> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/xaoxuu/hexo-theme-material-x themes/material-x</span><br></pre></td></tr></table></figure><p>​    Then install dependencies:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-posts hexo-helper-qrcode</span><br></pre></td></tr></table></figure><p>​    Go to the your project’s root directory, and configure the file <strong>_config.yml</strong>.</p><p>​    Item <strong>theme:</strong> change its value to your theme’s name, for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: material-x</span><br></pre></td></tr></table></figure><h3 id="Install-git-deploy-plugin"><a href="#Install-git-deploy-plugin" class="headerlink" title="Install git deploy plugin"></a>Install git deploy plugin</h3><p>​    Look for <strong>deploy</strong> item ,and modify it like follow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: git@github.com:wjwrobot/wjwrobot.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure><p>​    After that we are going to install git deploy plugin:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>​    Latsly, you can configure your theme according to this <a href="https://xaoxuu.com/wiki/material-x/config/index.html" target="_blank" rel="noopener">tutorial</a> .</p><h2 id="Deploy-to-your-github-website"><a href="#Deploy-to-your-github-website" class="headerlink" title="Deploy to your github website"></a>Deploy to your github website</h2><p>​    Before deploy it to github, test it on local machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generator <span class="comment"># or hexo g</span></span><br><span class="line">$ hexo server <span class="comment"># or hexo s</span></span><br></pre></td></tr></table></figure><p>​    Open a browser ,input following address:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p>​    If work well deploy it to github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># or hexo d</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Create-a-repo-for-your-theme"><a href="#Create-a-repo-for-your-theme" class="headerlink" title="Create a repo for your theme"></a>Create a repo for your theme</h2><p>​    Change your pwd to your installed theme directory. Then use browser to create a repo and name it (e.g.<strong>hexo-theme-material-x</strong>). Change remote origin to your repo and add the origin author’s repo as remote upstream for later updating.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">$ git remote remove origin</span><br><span class="line">$ git remote add origin https://github.com/wjwrobot/hexo-theme-material-x.gi</span><br><span class="line">$ git push origin master</span><br><span class="line">$ git remote add upstream https://github.com/xaoxuu/hexo-theme-material-x.git</span><br></pre></td></tr></table></figure><p>​    If upstream has update, you can use <strong>fetch</strong> command to get it and <strong>merge</strong> upstream/master to local master:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream</span><br><span class="line">$ git merge upstream/master</span><br></pre></td></tr></table></figure><p>​    Push to remote repo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A tutorial for building your own website make use of github and hexo, with a beautiful theme “material-x”.&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="https://wjwrobot.github.io/categories/Nodejs/"/>
    
    
      <category term="git" scheme="https://wjwrobot.github.io/tags/git/"/>
    
      <category term="hexo" scheme="https://wjwrobot.github.io/tags/hexo/"/>
    
      <category term="nodejs" scheme="https://wjwrobot.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="https://wjwrobot.github.io/2019/01/18/My-New-Post/"/>
    <id>https://wjwrobot.github.io/2019/01/18/My-New-Post/</id>
    <published>2019-01-18T14:47:55.000Z</published>
    <updated>2019-01-20T11:35:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="other" scheme="https://wjwrobot.github.io/categories/other/"/>
    
    
      <category term="test" scheme="https://wjwrobot.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wjwrobot.github.io/2019/01/18/hello-world/"/>
    <id>https://wjwrobot.github.io/2019/01/18/hello-world/</id>
    <published>2019-01-17T16:00:00.000Z</published>
    <updated>2019-01-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>It is a test post.</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/A3UyEWqO0wY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It is a test post.&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="https://wjwrobot.github.io/categories/other/"/>
    
    
      <category term="test" scheme="https://wjwrobot.github.io/tags/test/"/>
    
  </entry>
  
</feed>
