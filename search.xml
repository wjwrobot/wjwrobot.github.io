<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Install and Configure Arch Linux</title>
      <link href="/2019/05/05/Install-and-Configure-Arch-Linux/"/>
      <url>/2019/05/05/Install-and-Configure-Arch-Linux/</url>
      
        <content type="html"><![CDATA[<p>Steps to install Arch Linux and configure it for daily use and work.</p><a id="more"></a><h2 id="Pre-installation"><a href="#Pre-installation" class="headerlink" title="Pre-installation"></a>Pre-installation</h2><h3 id="Verify-signature"><a href="#Verify-signature" class="headerlink" title="Verify signature"></a>Verify signature</h3><p>Use <strong>GnuPG</strong> to verify downloaded package.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver pgp.mit.edu --keyserver-options auto-key-retrieve --verify archlinux-&lt;version&gt;-x86_64.iso.sig</span><br></pre></td></tr></table></figure><h3 id="Build-bootable-live-environment"><a href="#Build-bootable-live-environment" class="headerlink" title="Build bootable live environment"></a>Build bootable live environment</h3><p>Plug in USB and check its device name by</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>Asume its name is <strong>/dev/sdb</strong>, then use <strong>dd</strong> to build the bootable system to usb (<strong>warning</strong> before press “ENTER”, double check the command to prevent from destroying system)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/way/to/arch/file of=/dev/sdb</span><br></pre></td></tr></table></figure><h3 id="Verify-the-boot-mode"><a href="#Verify-the-boot-mode" class="headerlink" title="Verify  the boot mode"></a>Verify  the boot mode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><p>If the directory does not exist, the system may be booted in <strong>BIOS</strong> or <strong>CSM</strong> mode, otherwise, in <strong>UEFI</strong> mode. If it’s in <strong>UEFI</strong> mode, go ahead.</p><p>Plug in USB, shut down computer, enter into BIOS system interface with holding <strong>F2</strong> then press power button. (Different motherboards diverse in entering BIOS)</p><p>If you can’t see a boot option “boot from USB”, go to create a boot option by select your boot file which end with <strong>.efi</strong>. And then put this option to number 1 boot option. OK, save change and reboot system.</p><hr><p>Now we had entered the Arch live system.</p><h3 id="Connect-to-the-Internet"><a href="#Connect-to-the-Internet" class="headerlink" title="Connect to the Internet"></a>Connect to the Internet</h3><p>The installation image enables the <strong>dhcpcd</strong> daemon for wired network devices on boot. The connection can be verified with <strong>ping</strong>, If you use wifi, you should configure wifi with <strong>wifi-menu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi-menu</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 3 baidu.com</span><br></pre></td></tr></table></figure><h3 id="Update-the-system-clock"><a href="#Update-the-system-clock" class="headerlink" title="Update the system clock"></a>Update the system clock</h3><p>Use <strong>timedatectl</strong> to ensure the system clock is accurate</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>(To check the service status, use )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><h3 id="Partition-the-disks"><a href="#Partition-the-disks" class="headerlink" title="Partition the disks"></a>Partition the disks</h3><p>When recognized by the live system,disks are assigned to a <strong>block device</strong>. To  identify these devices, use <strong>lsblk</strong> or <strong>fdisk -l</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>The following <em>partitions</em> are required for a chosen device:</p><ul><li><p>One partition for the root directory <strong>/</strong> .</p></li><li><p>If <strong>UEFI</strong> is enabled, an  <strong>EFI system partition</strong> .</p><p>  (The following are alternative)</p></li><li><p><strong>Swap</strong> space can be set on a separate partition or a <strong>swap file</strong> .</p></li><li><p><strong>/home</strong> directory for users .</p></li></ul><p>(<em>Note</em> : If you want to create any stacked block devices for <strong>LVM</strong>, <strong>disk encryption</strong>, or <strong>RAID</strong>, do it now.)</p><p>To modify <strong>partition tables</strong>, use <strong>cfdisk</strong>, <strong>fdisk</strong> or <strong>parted</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/sda</span><br></pre></td></tr></table></figure><p>my partition plan for system with 4G RAM and 500G storage device</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1 200M/boot/efi  EFI System</span><br><span class="line">/dev/sda2 250G    /    Linux fs</span><br><span class="line">/dev/sda3 remaining  /home    Linux fs</span><br></pre></td></tr></table></figure><h3 id="Format-the-partitions"><a href="#Format-the-partitions" class="headerlink" title="Format the partitions"></a>Format the partitions</h3><p>Once the partitions have been created, each must be formatted with an appropriate <strong>file system</strong>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1</span><br><span class="line"></span><br><span class="line">mkfs.ext4 /dev/sda2</span><br><span class="line">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure><h3 id="Mount-the-file-systems"><a href="#Mount-the-file-systems" class="headerlink" title="Mount the file systems"></a>Mount the file systems</h3><p>Mount the file system on the root partition to <strong>/mnt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda2 /mnt</span><br></pre></td></tr></table></figure><p>Create mount points for any remaining partitions and mount them accordingly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/boot/efi</span><br><span class="line">mount /dev/sda1 /mnt/boot/efi</span><br><span class="line"></span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sda3 /mnt/home</span><br></pre></td></tr></table></figure><p><strong>genfstab</strong> will later detect mounted file systems and swap space.</p><hr><p>We have accomplished the work for Pre-Installation, now enter the process of Installation.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Select-the-mirrors"><a href="#Select-the-mirrors" class="headerlink" title="Select the mirrors"></a>Select the mirrors</h3><p>Packages to be installed must be downloaded from mirror servers, which are defined in <strong>/etc/pacman.d/mirrorlist</strong> . Use <strong>vim</strong> to select your country’s mirror to the top.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><h3 id="Install-the-base-packages"><a href="#Install-the-base-packages" class="headerlink" title="Install the base packages"></a>Install the base packages</h3><p>Use the <strong>pacstrap</strong> script to install the <strong>base</strong> and <strong>base-devel</strong> package groups:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel</span><br></pre></td></tr></table></figure><hr><h2 id="Configure-the-system"><a href="#Configure-the-system" class="headerlink" title="Configure the system"></a>Configure the system</h2><h3 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h3><p>Generate an <strong>fstab</strong> file (use <strong>-U</strong> or <strong>-L</strong> to define by <em>UUID</em> or <em>labels</em>, respectively)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>and check the resulting file.</p><h3 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h3><p>Change root into the new system:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h3 id="Configure-wifi"><a href="#Configure-wifi" class="headerlink" title="Configure wifi"></a>Configure wifi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S dialog wpa_suppliant </span><br><span class="line">wifi-menu</span><br></pre></td></tr></table></figure><h3 id="Time-zone"><a href="#Time-zone" class="headerlink" title="Time zone"></a>Time zone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asian/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>Generate <strong>/etc/adjtime</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><p>This command assumes the hardware clock is set to <strong>UTC</strong>.</p><h3 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h3><p>Uncomment <strong>en_US.UTF-8 UTF-8</strong> and other needed <strong>locales</strong> in <strong>/etc/locale.gen</strong>,and generate them</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><p>Set the <strong>LANG</strong> variable in <strong>/etc/locale.conf</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="Network-configuration"><a href="#Network-configuration" class="headerlink" title="Network configuration"></a>Network configuration</h3><p>Create the hostname file <strong>/etc/hostname</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'Arch'</span> &gt; /etc/hostname</span><br></pre></td></tr></table></figure><p>​Add matching entries to <strong>/etc/hosts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\tArch.localdomain\tArch"</span> &gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>If the system has a permament IP address, it should be used instead of <strong>127.0.1.1</strong> .</p><h3 id="Initramfs"><a href="#Initramfs" class="headerlink" title="Initramfs"></a>Initramfs</h3><p>Creating a new <strong>initramfs</strong> is usually not required, because <strong>mkinitcpio</strong> was run on installation of the <strong>linux</strong> package with <strong>pacstrap</strong> .</p><p>For special configurations, modify the <strong>mkinitcpio.conf</strong> file and recreate the initramfs image :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -p linux</span><br></pre></td></tr></table></figure><h3 id="Set-root-password"><a href="#Set-root-password" class="headerlink" title="Set root password"></a>Set root password</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h3 id="Install-bootloader"><a href="#Install-bootloader" class="headerlink" title="Install bootloader"></a>Install bootloader</h3><p>A Linux-capable boot loader must be installed in order to boot Arch Linux. If you have an Intel or AMD CPU, enable <strong>microcode</strong> updates. Let’s install GRUB boot loader:</p><h4 id="Download-grub-and-efibootmgr"><a href="#Download-grub-and-efibootmgr" class="headerlink" title="Download grub and efibootmgr"></a>Download grub and efibootmgr</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br></pre></td></tr></table></figure><p><strong>GRUB</strong> is the bootloader while <strong>efibootmgr</strong> is used by the GRUB installation script to write boot entries to <strong>NVRAM</strong> .</p><p>(Mount the EFI system partition at mount point, for example, <strong><em>/boot/efi</em></strong> )</p><h4 id="Install-the-GRUB-EFI-application"><a href="#Install-the-GRUB-EFI-application" class="headerlink" title="Install the GRUB EFI application"></a>Install the GRUB EFI application</h4><p>Install the GRUB EFI application <strong>grubx64.efi</strong> to <strong><em>/boot/efi</em>/EFI/GRUB/</strong> and install its modules to <strong>/boot/grub/x86_64-efi/</strong> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB</span><br></pre></td></tr></table></figure><p>(After the above install completed the main GRUB directory is located at <strong>/boot/grub/</strong> . Note that <strong>grub-install</strong> also tries to create an entry tin the fireware boot manager, named <strong>GRUB</strong> in the above example.)</p><h4 id="Generated-grub-cfg"><a href="#Generated-grub-cfg" class="headerlink" title="Generated grub.cfg"></a>Generated grub.cfg</h4><p>Use the <strong>grub-mkconfig</strong> tool to generate <strong>/boot/grub/grub.cfg</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>(<em>Note</em>:</p><ul><li>Remember that <strong>/boot/grub/grub.cfg</strong> has to be re-generated after any change to <strong>/etc/default/grub</strong> or files in <strong>/etc/grub.d</strong> .</li><li>After installing or removing a <strong>kernel</strong>, you just need to re-run the above <strong>grub-mkconfig</strong> command.)</li></ul><h3 id="Reboot"><a href="#Reboot" class="headerlink" title="Reboot"></a>Reboot</h3><p>Exit the chroot environment, then manually unmount all the partitions.Finally, restart the machine.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><hr><h2 id="Post-installation"><a href="#Post-installation" class="headerlink" title="Post-installation"></a>Post-installation</h2><h3 id="Add-a-new-user"><a href="#Add-a-new-user" class="headerlink" title="Add a new user"></a>Add a new user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash wjw</span><br><span class="line">passwd wjw</span><br></pre></td></tr></table></figure><p>To grant sudo access to user <em>wjw</em> run <strong>visudo</strong> and add “<strong>wjw ALL=(ALL) ALL</strong>“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3><p>See available fonts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fc</span>-list</span><br></pre></td></tr></table></figure><p>Download fonts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wqy-microhei ttf-dejavu</span><br></pre></td></tr></table></figure><p>or download packages manually and put font files to the <strong>.local/share/fonts/</strong> directory.</p><p>If you want to change console font, put font files in the <strong>/usr/share/kbd/consolefonts</strong> directory. Then go to see the console fonts, and select one..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/share/kbd/consolefonts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"FONT=sun12x22\nFONT_MAP=8859-2"</span> &gt; /etc/vconsole.conf</span><br></pre></td></tr></table></figure><h3 id="Graphical-user-interface"><a href="#Graphical-user-interface" class="headerlink" title="Graphical user interface"></a>Graphical user interface</h3><h3 id="Install-Xorg"><a href="#Install-Xorg" class="headerlink" title="Install Xorg"></a>Install Xorg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg-server xorg-xinit</span><br></pre></td></tr></table></figure><p>configure <strong>~/.xinitrc</strong> file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -f ~/.Xresources ]] &amp;&amp; xrdb -merge -I<span class="variable">$HOME</span> ~/.Xresources</span><br></pre></td></tr></table></figure><h3 id="Install-i3-gaps-and-related-programs"><a href="#Install-i3-gaps-and-related-programs" class="headerlink" title="Install  i3-gaps  and related programs"></a>Install  i3-gaps  and related programs</h3><p>Install i3-gaps and configure to start from <strong>~/.xinitrc</strong> . (<strong>rofi</strong> for replacing d-menu, <strong>feh</strong> for setting wallpaper, <strong>light</strong> for brightness control, <strong>scrot</strong> for screenshot, <strong>i3blocks</strong> for replacing i3status, <strong>acpi</strong> for i3blocks’s battery module)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S i3-gaps i3blocks rofi feh light scrot acpi</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'exec i3'</span> &gt; ~/.xinitrc</span><br></pre></td></tr></table></figure><p>You can start up i3 manually by typing command <strong>startx</strong> or set it to automatically.If you use <strong>zsh</strong> ,put the following into the <strong>~/.zprofile</strong> to auto start X at login</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ ! <span class="variable">$DISPLAY</span> &amp;&amp; <span class="variable">$XDG_VTNR</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exec</span> startx</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="Install-ssr"><a href="#Install-ssr" class="headerlink" title="Install ssr"></a>Install ssr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git wget python</span><br><span class="line">wget http://www.djangoz.com/ssr</span><br><span class="line">sudo mv ssr /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 744 /usr/<span class="built_in">local</span>/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure><h3 id="Wireless-configure"><a href="#Wireless-configure" class="headerlink" title="Wireless configure"></a>Wireless configure</h3><p>Install <strong>dialog</strong> and <strong>wpa_suppliant</strong> for using <strong>wifi-menu</strong> . (or optionally Install <strong>networkmanager</strong> )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dialog wpa_suppliant</span><br></pre></td></tr></table></figure><p>Enabling wifi auto connecting when boot. (use <strong>netctl</strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wifi-menu -o</span><br></pre></td></tr></table></figure><p>use command above to generate the profile in <strong>/etc/netctl</strong> for use of <strong>netctl</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netctl <span class="built_in">enable</span> your_profile</span><br></pre></td></tr></table></figure><h3 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h3><p>If no sound because of Master set to <strong>HDMI</strong>, go to change it to <strong>PCM</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> -e <span class="string">"defaults.pcm.card 1\ndefaults.pcm.device 0\ndefaults.ctl.card 1"</span> &gt; /etc/asound.conf</span><br></pre></td></tr></table></figure><p>Download <strong>pulseaudio</strong> and related control command utils.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S pulseaudio playerctl</span><br></pre></td></tr></table></figure><p>And download <strong>alsa-utils</strong> for controling alsa<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S alsa-utils</span><br></pre></td></tr></table></figure></p><h3 id="Useful-program"><a href="#Useful-program" class="headerlink" title="Useful program"></a>Useful program</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S firefox neofetch</span><br></pre></td></tr></table></figure><h3 id="yay"><a href="#yay" class="headerlink" title="yay"></a>yay</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="lxappearance-amp-qt5ct"><a href="#lxappearance-amp-qt5ct" class="headerlink" title="lxappearance &amp; qt5ct"></a>lxappearance &amp; qt5ct</h3><p>qt5ct for qt5 based programs, while lxappearance for gtk based programs.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S lxappearance qt5ct</span><br></pre></td></tr></table></figure><p>gtk related configure files:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/.gtkrc-2.0</span><br><span class="line">~/.config/gtk-3.0/settings.ini</span><br></pre></td></tr></table></figure><p>add the following environment variable to <strong>~/.pam_environment</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT_QPA_PLATFORMTHEME=qt5ct</span><br></pre></td></tr></table></figure><h3 id="laptop-power-saving"><a href="#laptop-power-saving" class="headerlink" title="laptop power saving"></a>laptop power saving</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S tlp</span><br></pre></td></tr></table></figure><p>then configure it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> tlp.service tlp-sleep.service</span><br><span class="line">systemctl mask systemd-rfkill.service systemd-rfkill.socket</span><br></pre></td></tr></table></figure><p>(<em>Note</em>: <strong>tlp.service</strong> starts <strong>NetworkManager.service</strong> if it is available. If you use a different network manager, mask <strong>NetworkManager.service</strong> or edit <strong>tlp.service</strong> and remove the service out of line <strong>Wants=</strong>)</p><h3 id="System-proxy-Privoxy"><a href="#System-proxy-Privoxy" class="headerlink" title="System proxy (Privoxy)"></a>System proxy (Privoxy)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman  -S privoxy</span><br></pre></td></tr></table></figure><p>then edit <strong>/etc/privoxy/config</strong> file and add the following line the 5.2 section (note the <strong>.</strong> at the end)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br></pre></td></tr></table></figure><p>It means that transact all http requests to socks5 and redirect to localhost’s 1080 port (change this value to your ssr listening port)</p><p>then you should go to start and enable <strong>privoxy.service</strong> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start privoxy.service</span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy.service</span><br></pre></td></tr></table></figure><p>Privoxy’s default listening port is 8118, so your should set your http proxy address to <strong>127.0.0.1:8118</strong> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:8118"</span></span><br></pre></td></tr></table></figure><p>Configure git proxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:8118</span><br></pre></td></tr></table></figure><h3 id="File-manager"><a href="#File-manager" class="headerlink" title="File manager"></a>File manager</h3><p>Visual file manafer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ranger</span><br></pre></td></tr></table></figure><h3 id="tmux-amp-tmux-resurrect"><a href="#tmux-amp-tmux-resurrect" class="headerlink" title="tmux &amp; tmux-resurrect"></a>tmux &amp; tmux-resurrect</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S tmux</span><br></pre></td></tr></table></figure><h3 id="Build-package"><a href="#Build-package" class="headerlink" title="Build package"></a>Build package</h3><p>use <strong>asp</strong> or <strong>pbget</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S asp</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Download docker, then create a group named docker and add user to this group for using docker without “sudo” command for regular user.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S docker</span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>Then enable and start docker.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><p>Setting proxy for docker:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/systemd/system/docker.service.d</span><br><span class="line">touch /etc/systemd/system/docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure><p>put following content to the file above</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=192.168.1.1:8118&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=192.168.1.1:8118&quot;</span><br></pre></td></tr></table></figure><p>Then reload units</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>Check whether setting successfully</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl show docker --property Environment</span><br></pre></td></tr></table></figure><h3 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h3><p>Download <strong>nvidia-docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S nvidia-docker</span><br></pre></td></tr></table></figure><p>Pull latest <strong>tensorflow-gpu</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tensorflow/tensorflow:latest-gpu-py3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --runtime=nvidia -it tensorflow/tensorflow:latest-gpu-py3 bash</span><br></pre></td></tr></table></figure><p>(<strong>Note:</strong> <code>nvidia-docker</code> v1 uses the <code>nvidia-docker</code> alias, where v2 uses <code>docker --runtime=nvidia</code>.)</p><p>Docker Usage </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a<span class="comment">#check all containers</span></span><br><span class="line">docker rm $(docker ps -aq) <span class="comment">#delete all containers</span></span><br><span class="line"></span><br><span class="line">docker images<span class="comment">#check all images</span></span><br><span class="line">docker rmi $(docker images -q) <span class="comment">#delete all images</span></span><br><span class="line">docker rmi node_name<span class="comment">#delete node(image)</span></span><br><span class="line"></span><br><span class="line">docker info</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a container named tf and run it</span></span><br><span class="line"><span class="comment"># -it : interactive</span></span><br><span class="line"><span class="comment"># --name : assign the name "tf" to this container</span></span><br><span class="line"><span class="comment"># -p : mapping ports of container to host, first pair for Jupyter notebook, the second one for Tensorboard</span></span><br><span class="line"><span class="comment"># -v host_folder:container_folder : enables sharing a folder between the host and the container. The host folder should be inside your home directory. This folder is seen as notebooks directory in the container which is used by Ipython/Jupyter Notebook.</span></span><br><span class="line">docker run -it -p 8888:8888 -p 6006:6006 -v $(<span class="built_in">pwd</span>)/tensorflow:/notebooks --name tf tensorflow/tensorflow</span><br><span class="line"></span><br><span class="line">docker start -i tf<span class="comment">#start container named tf with interactive mode</span></span><br></pre></td></tr></table></figure><h3 id="Anaconda-and-Pytorch"><a href="#Anaconda-and-Pytorch" class="headerlink" title="Anaconda and Pytorch"></a>Anaconda and Pytorch</h3><p>Installing anaconda3 firstly, then create an environment named “pytorch” for pytorch compatible with cuda 10, lastly, enter this environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.continuum.io/archive/Anaconda3-2018.12-Linux-x86_64.sh</span><br><span class="line">./Anaconda3-2018.12-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">conda create -n pytorch pytorch torchvision cuda100 -c pytorch</span><br><span class="line"><span class="built_in">source</span> activate pytorch</span><br></pre></td></tr></table></figure><p>or use <strong>pip</strong> package manager to install pytorch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 --no-cache-dir install torch</span><br><span class="line">$ pip3 --no-cache-dir install torchvision</span><br></pre></td></tr></table></figure><h3 id="xclip"><a href="#xclip" class="headerlink" title="xclip"></a>xclip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xclip</span><br></pre></td></tr></table></figure><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>Add ssh key :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"youremail@gmail.com"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># change your origin remote to ssh url from https url</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:&lt;Username&gt;/&lt;Project&gt;.git</span><br></pre></td></tr></table></figure><p>Go to github add a new key, then paste the content of the clipboard to it.</p><p>(If count problem “ssh: connect to host github.com port 22: Connection refused”, go to create a config file for ssh)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"> Hostname ssh.github.com</span><br><span class="line"> Port 443</span><br></pre></td></tr></table></figure><p>Put the content above to the file <code>~/.ssh/config</code>.</p><h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><p>mpd + ncmpcpp + cantata + mps-youtube + youtube-dl + mpv</p><h3 id="Text-Editor"><a href="#Text-Editor" class="headerlink" title="Text Editor"></a>Text Editor</h3><p>chemacs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/plexus/chemacs.git</span><br><span class="line"><span class="built_in">cd</span> chemacs</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>Use Doom-Emacs with chemacs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.emacs-profiles.el</span><br><span class="line">mkdir -p ~/Git/doom</span><br></pre></td></tr></table></figure></p><p>put the content below to <em>~/.emacs-profiles.el</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((&quot;default&quot; . ((user-emacs-directory . &quot;~/.emacs.d&quot;)))</span><br><span class="line"> (&quot;doom&quot; . ((user-emacs-directory . &quot;~/Git/doom&quot;)</span><br><span class="line">            (env . ((&quot;DOOMDIR&quot; . &quot;~/.doom.d&quot;))))))</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b develop https://github.com/hlissner/doom-emacs ~/Git/doom</span><br><span class="line">~/Git/doom/bin/doom -p ~/.doom.d quickstart</span><br><span class="line">make install</span><br><span class="line">emacs --with-profile doom &amp;</span><br></pre></td></tr></table></figure><p>Doom-Emacs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone -b develop https://github.com/hlissner/doom-emacs ~/.emacs.d</span><br><span class="line">~/.emacs.d/bin/doom quickstart</span><br><span class="line">cd .emacs.d</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><h3 id="Pdf-Reader"><a href="#Pdf-Reader" class="headerlink" title="Pdf Reader"></a>Pdf Reader</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zathura zathura-pdf-poppler</span><br></pre></td></tr></table></figure><h3 id="Input-Method"><a href="#Input-Method" class="headerlink" title="Input Method"></a>Input Method</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ibus ibus-rime</span><br></pre></td></tr></table></figure><p>​ Change the default chinese input method to simplified, within the file <em>~/.config/ibus/rime/build/luna_pinyin.schema.yaml</em> put <em>reset: 1</em> underneath the <em>name: simplification</em>.</p><h3 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h3><p>​ In auto switch profile, in Rule list confifug, select AutoProxy, and put the following content into Rule list url.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</span><br></pre></td></tr></table></figure></p><h3 id="Mount-usb"><a href="#Mount-usb" class="headerlink" title="Mount usb"></a>Mount usb</h3><p>See the usb’s device name<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail</span><br></pre></td></tr></table></figure></p><p>said, <em>/dev/sdb</em>, then go to make a mount point, and mount it<br>for example<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /mnt/media/usb</span><br><span class="line">mount /dev/sdb1 /mnt/media/usb</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sdb1</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Installation guide</a></li><li><a href="https://stackoverflow.com/questions/33636925/how-do-i-start-tensorflow-docker-jupyter-notebook#" target="_blank" rel="noopener">How do I start tensorflow docker jupyter notebook</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Enable Colaboratory to Use Local Runtime</title>
      <link href="/2019/01/23/Enable-Colaboratory-use-local-runtime/"/>
      <url>/2019/01/23/Enable-Colaboratory-use-local-runtime/</url>
      
        <content type="html"><![CDATA[<p>Enable Google Colaboratory to use local runtime through Jupyter Notebook.</p><a id="more"></a><h3 id="Install-Jupyter-Notebook"><a href="#Install-Jupyter-Notebook" class="headerlink" title="Install Jupyter Notebook"></a>Install Jupyter Notebook</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S jupyter-notebook</span><br></pre></td></tr></table></figure><p>Enable interactive Javascript widgets in the notebooks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo jupyter nbextension <span class="built_in">enable</span> --py --sys-prefix widgetsnbextension</span><br></pre></td></tr></table></figure><h3 id="Install-and-enable-the-jupyter-http-over-ws-jupyter-extension"><a href="#Install-and-enable-the-jupyter-http-over-ws-jupyter-extension" class="headerlink" title="Install and enable the jupyter_http_over_ws jupyter extension"></a>Install and enable the <code>jupyter_http_over_ws</code> jupyter extension</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install jupyter_http_over_ws</span><br><span class="line">$ jupyter serverextension <span class="built_in">enable</span> --py jupyter_http_over_ws</span><br></pre></td></tr></table></figure><h3 id="Start-server-and-authenticate"><a href="#Start-server-and-authenticate" class="headerlink" title="Start server and authenticate"></a>Start server and authenticate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook \</span><br><span class="line">  --NotebookApp.allow_origin=<span class="string">'https://colab.research.google.com'</span> \</span><br><span class="line">  --port=8888 \</span><br><span class="line">  --NotebookApp.port_retries=0</span><br></pre></td></tr></table></figure><h3 id="Connect-to-the-local-runtime"><a href="#Connect-to-the-local-runtime" class="headerlink" title="Connect to the local runtime"></a>Connect to the local runtime</h3><p>In Colaboratory, click the “Connect” button and select “Connect to local runtime…”</p><p><em>Note:</em></p><p>If you use firefox, you must set the <code>network.websocket.allowInsecureFromHTTPS</code> to be true.</p><p>In the address bar, type <strong>about:config</strong> and press Enter, then type <code>network.websocket.allowInsecureFromHTTPS</code> and set its value to be true.</p><h3 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h3><ul><li><p><a href="https://wiki.archlinux.org/index.php/Jupyter" target="_blank" rel="noopener">Install Jupyter</a></p></li><li><p><a href="https://research.google.com/colaboratory/local-runtimes.html" target="_blank" rel="noopener">Colaboratory local runtime</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Colaboratory </tag>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building Personal Website with Github</title>
      <link href="/2019/01/20/build_site_with_github/"/>
      <url>/2019/01/20/build_site_with_github/</url>
      
        <content type="html"><![CDATA[<p>A tutorial for building your own website make use of github and hexo, with a beautiful theme “material-x”.</p><a id="more"></a><h2 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h2><p>​    You should alread install <strong>git</strong> and <strong>nodejs</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​    Hexo create a directory for your project:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>​    Hexo will build a skeleton for your site:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>​    Test whether everything is ok:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>​    If it works well. you can change the theme, which can be found on <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo</a> site. I will use <code>material-x</code>  <a href="https://xaoxuu.com/wiki/material-x/index.html" target="_blank" rel="noopener">theme</a> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/xaoxuu/hexo-theme-material-x themes/material-x</span><br></pre></td></tr></table></figure><p>​    Then install dependencies:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-posts hexo-helper-qrcode</span><br></pre></td></tr></table></figure><p>​    Go to the your project’s root directory, and configure the file <strong>_config.yml</strong>.</p><p>​    Item <strong>theme:</strong> change its value to your theme’s name, for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: material-x</span><br></pre></td></tr></table></figure><h3 id="Install-git-deploy-plugin"><a href="#Install-git-deploy-plugin" class="headerlink" title="Install git deploy plugin"></a>Install git deploy plugin</h3><p>​    Look for <strong>deploy</strong> item ,and modify it like follow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: git@github.com:wjwrobot/wjwrobot.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure><p>​    After that we are going to install git deploy plugin:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>​    Latsly, you can configure your theme according to this <a href="https://xaoxuu.com/wiki/material-x/config/index.html" target="_blank" rel="noopener">tutorial</a> .</p><h2 id="Deploy-to-your-github-website"><a href="#Deploy-to-your-github-website" class="headerlink" title="Deploy to your github website"></a>Deploy to your github website</h2><p>​    Before deploy it to github, test it on local machine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generator <span class="comment"># or hexo g</span></span><br><span class="line">$ hexo server <span class="comment"># or hexo s</span></span><br></pre></td></tr></table></figure><p>​    Open a browser ,input following address:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p>​    If work well deploy it to github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># or hexo d</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Create-a-repo-for-your-theme"><a href="#Create-a-repo-for-your-theme" class="headerlink" title="Create a repo for your theme"></a>Create a repo for your theme</h2><p>​    Change your pwd to your installed theme directory. Then use browser to create a repo and name it (e.g.<strong>hexo-theme-material-x</strong>). Change remote origin to your repo and add the origin author’s repo as remote upstream for later updating.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">$ git remote remove origin</span><br><span class="line">$ git remote add origin https://github.com/wjwrobot/hexo-theme-material-x.gi</span><br><span class="line">$ git push origin master</span><br><span class="line">$ git remote add upstream https://github.com/xaoxuu/hexo-theme-material-x.git</span><br></pre></td></tr></table></figure><p>​    If upstream has update, you can use <strong>fetch</strong> command to get it and <strong>merge</strong> upstream/master to local master:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream</span><br><span class="line">$ git merge upstream/master</span><br></pre></td></tr></table></figure><p>​    Push to remote repo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/2019/01/18/My-New-Post/"/>
      <url>/2019/01/18/My-New-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/18/hello-world/"/>
      <url>/2019/01/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>It is a test post.</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/A3UyEWqO0wY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
